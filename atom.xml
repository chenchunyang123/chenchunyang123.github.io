<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一条放了盐的鱼</title>
  
  <subtitle>web搬砖大师</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://chenchunyang.site/"/>
  <updated>2019-12-25T08:00:41.844Z</updated>
  <id>http://chenchunyang.site/</id>
  
  <author>
    <name>Chen</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>腾讯云服务器（win）开启node后台服务流程及问题</title>
    <link href="http://chenchunyang.site/2019/12/04/15-Start-the-node-service/"/>
    <id>http://chenchunyang.site/2019/12/04/15-Start-the-node-service/</id>
    <published>2019-12-04T09:19:32.695Z</published>
    <updated>2019-12-25T08:00:41.844Z</updated>
    
    <content type="html"><![CDATA[<p>这两天趁着腾讯云有活动，买了一年的入门级云服务器的使用权限，打算用 node 写一些后台，正好也练习练习 node，话不多说，开始折腾！！</p><h4 id="登录远程服务器"><a href="#登录远程服务器" class="headerlink" title="登录远程服务器"></a>登录远程服务器</h4><p>1、在实例中，找到刚刚购买的服务器（没开机的先开机）</p><p><img src="https://i.loli.net/2019/12/02/oWdcGyaHKjwPUZC.jpg" alt="登录.jpg"></p><a id="more"></a><p>2、点击右侧的登录按钮</p><p><img src="https://i.loli.net/2019/12/02/xtqTKRN3yMlVbro.jpg" alt="登录方式.jpg"></p><p>3、因为我是 windows 的系统，这里选择第一种方式（如果你是其他的系统或者登录上有什么问题，可以点击上图中蓝色的字查看官方文档），然后会下载一个 rdp 文件到你的电脑中，之后双击这个文件，输入登录密码登录，密码的设置和重置这里不再说明，需要请查看官方文档</p><p><img src="https://i.loli.net/2019/12/02/D8VWlzpMQZ2PuwL.jpg" alt="输入密码.jpg"></p><p>4、输入正确的密码之后，我们就成功连接进来了，可以进行下一步操作了</p><p><img src="https://i.loli.net/2019/12/02/Um2KCL8bfDRwVnj.jpg" alt="成功登录.jpg"></p><h4 id="配置远程服务器-node"><a href="#配置远程服务器-node" class="headerlink" title="配置远程服务器 node"></a>配置远程服务器 node</h4><p>以下都是在远程链接界面中进行：</p><p>1、首先下载 node 安装包，在官网选择与系统对应的版本，下载地址：<a href="http://nodejs.cn/download/" target="_blank" rel="noopener">http://nodejs.cn/download/</a></p><p><img src="https://i.loli.net/2019/12/02/U3C57w9J62YudSr.jpg" alt="安装node.jpg"></p><p>2、安装 node（不再详细介绍，主要一点是里面有一项 addtopath 需要勾选上，意思是添加到环境变量，那么你在磁盘的任意位置都可以使用 node 命令）</p><p><img src="https://i.loli.net/2019/12/02/juHIZN26RUxvGDK.jpg" alt="安装.jpg"></p><h4 id="写-node-接口"><a href="#写-node-接口" class="headerlink" title="写 node 接口"></a>写 node 接口</h4><p>下载一个常用的编辑器写 node，我下载的是 vscode。<br>1、首先在一个空文件夹下创建 app.js 文件，然后写入以下代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>); <span class="comment">// 需安装模块npm install express</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> app = express(); <span class="comment">// 实例化app</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'/person'</span>, (req, res) =&gt; &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 接口</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    res.json(&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        name: <span class="string">'小明'</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        age: <span class="number">22</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    &#125;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">app.listen(<span class="number">80</span>, () =&gt; &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 监听80端口</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(<span class="string">'监听80端口'</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure><p>2、然后 vscode 的终端中开启 node 服务（命令：node [文件名].js）（不要忽略上一步中安装 express 的操作）</p><p><img src="https://i.loli.net/2019/12/02/t63VOJB7i1qhvp8.jpg" alt="开启服务.jpg"></p><h4 id="配置云服务器安全组"><a href="#配置云服务器安全组" class="headerlink" title="配置云服务器安全组"></a>配置云服务器安全组</h4><p>因为我们想通过 80 端口，从别的机器上访问到/person 这个接口，那么我们就需要进行安全组配置，定义入站出站规则。<br>1、打开之前云服务器后台界面，点击左侧安全组选项，然后在自己服务器的区域选项下点击新建按钮，再选择放通全部端口</p><p><img src="https://i.loli.net/2019/12/02/bLrITUeoNDVX9y7.jpg" alt="配置步骤.jpg"></p><p>2、然后我们需要关联服务器，点击管理实例，新增关联，选择服务器，确定</p><p><img src="https://i.loli.net/2019/12/02/p52ZkWPSOghRfCw.jpg" alt="管理实例.jpg"><br><img src="https://i.loli.net/2019/12/02/7urcd5xfin9VKOz.jpg" alt="关联实例.jpg"></p><p>3、这些配置完成后，我们就可以在自己电脑上的浏览器通过服务器的公网 ip 成功访问到该接口了</p><p><img src="https://i.loli.net/2019/12/02/Hzh1kRL5dysJwpA.jpg" alt="访问接口.jpg"></p><h4 id="注意问题"><a href="#注意问题" class="headerlink" title="注意问题"></a>注意问题</h4><p>1、如果你的安全组并不想开启全部端口，只想开启需要的，那么记的在远程服务器开启 node 服务的端口号一定要在安全组里面配置，否则会出现连接超时。<br>2、node 服务的端口号并不能任意设置，某些端口号会让部分浏览器访问时报错（ERR_UNSAFE_PORT），可以理解为一种安全策略，以下这些端口号应避免使用：</p><blockquote><p>1, // tcpmux<br>7, // echo<br>9, // discard<br>11, // systat<br>13, // daytime<br>15, // netstat<br>17, // qotd<br>19, // chargen<br>20, // ftp data<br>21, // ftp access<br>22, // ssh<br>23, // telnet<br>25, // smtp<br>37, // time<br>42, // name<br>43, // nicname<br>53, // domain<br>77, // priv-rjs<br>79, // finger<br>87, // ttylink<br>95, // supdup<br>101, // hostriame<br>102, // iso-tsap<br>103, // gppitnp<br>104, // acr-nema<br>109, // pop2<br>110, // pop3<br>111, // sunrpc<br>113, // auth<br>115, // sftp<br>117, // uucp-path<br>119, // nntp<br>123, // NTP<br>135, // loc-srv /epmap<br>139, // netbios<br>143, // imap2<br>179, // BGP<br>389, // ldap<br>465, // smtp+ssl<br>512, // print / exec<br>513, // login<br>514, // shell<br>515, // printer<br>526, // tempo<br>530, // courier<br>531, // chat<br>532, // netnews<br>540, // uucp<br>556, // remotefs<br>563, // nntp+ssl<br>587, // stmp?<br>601, // ??<br>636, // ldap+ssl<br>993, // ldap+ssl<br>995, // pop3+ssl<br>2049, // nfs<br>3659, // apple-sasl / PasswordServer<br>4045, // lockd<br>6000, // X11<br>6665, // Alternate IRC [Apple addition]<br>6666, // Alternate IRC [Apple addition]<br>6667, // Standard IRC [Apple addition]<br>6668, // Alternate IRC [Apple addition]<br>6669, // Alternate IRC [Apple addition]</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这两天趁着腾讯云有活动，买了一年的入门级云服务器的使用权限，打算用 node 写一些后台，正好也练习练习 node，话不多说，开始折腾！！&lt;/p&gt;
&lt;h4 id=&quot;登录远程服务器&quot;&gt;&lt;a href=&quot;#登录远程服务器&quot; class=&quot;headerlink&quot; title=&quot;登录远程服务器&quot;&gt;&lt;/a&gt;登录远程服务器&lt;/h4&gt;&lt;p&gt;1、在实例中，找到刚刚购买的服务器（没开机的先开机）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/12/02/oWdcGyaHKjwPUZC.jpg&quot; alt=&quot;登录.jpg&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="云服务器" scheme="http://chenchunyang.site/categories/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="node" scheme="http://chenchunyang.site/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>我的收藏</title>
    <link href="http://chenchunyang.site/2019/09/02/14-My-collection/"/>
    <id>http://chenchunyang.site/2019/09/02/14-My-collection/</id>
    <published>2019-09-02T08:20:48.000Z</published>
    <updated>2019-12-25T08:00:32.797Z</updated>
    
    <content type="html"><![CDATA[<h4 id="学习项目"><a href="#学习项目" class="headerlink" title="学习项目"></a>学习项目</h4><ul><li>可视化学习 git：<strong><a href="https://learngitbranching.js.org/" target="_blank" rel="noopener">https://learngitbranching.js.org/</a></strong></li><li>可视化学习 flex 布局：<strong><a href="http://flexboxfroggy.com/#zh-cn" target="_blank" rel="noopener">http://flexboxfroggy.com/#zh-cn</a></strong></li></ul><h4 id="实用库"><a href="#实用库" class="headerlink" title="实用库"></a>实用库</h4><ul><li>vis 可视化库：<strong><a href="https://visjs.org/index.html" target="_blank" rel="noopener">https://visjs.org/index.html</a></strong> （易上手，配置丰富，用来实现有向图不错）</li><li>js 函数工具库：<strong><a href="https://www.lodashjs.com/" target="_blank" rel="noopener">https://www.lodashjs.com/</a></strong> （丰富的 api，封装了很多常用的工具函数）<a id="more"></a></li></ul><h4 id="好文"><a href="#好文" class="headerlink" title="好文"></a>好文</h4><ul><li>数据结构和算法：<strong><a href="https://juejin.im/post/5d5b307b5188253da24d3cd1#heading-51" target="_blank" rel="noopener">https://juejin.im/post/5d5b307b5188253da24d3cd1#heading-51</a></strong> （有学习路径，有案例）</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;学习项目&quot;&gt;&lt;a href=&quot;#学习项目&quot; class=&quot;headerlink&quot; title=&quot;学习项目&quot;&gt;&lt;/a&gt;学习项目&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;可视化学习 git：&lt;strong&gt;&lt;a href=&quot;https://learngitbranching.js.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://learngitbranching.js.org/&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;可视化学习 flex 布局：&lt;strong&gt;&lt;a href=&quot;http://flexboxfroggy.com/#zh-cn&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://flexboxfroggy.com/#zh-cn&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;实用库&quot;&gt;&lt;a href=&quot;#实用库&quot; class=&quot;headerlink&quot; title=&quot;实用库&quot;&gt;&lt;/a&gt;实用库&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;vis 可视化库：&lt;strong&gt;&lt;a href=&quot;https://visjs.org/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://visjs.org/index.html&lt;/a&gt;&lt;/strong&gt; （易上手，配置丰富，用来实现有向图不错）&lt;/li&gt;
&lt;li&gt;js 函数工具库：&lt;strong&gt;&lt;a href=&quot;https://www.lodashjs.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.lodashjs.com/&lt;/a&gt;&lt;/strong&gt; （丰富的 api，封装了很多常用的工具函数）
    
    </summary>
    
    
      <category term="收藏" scheme="http://chenchunyang.site/categories/%E6%94%B6%E8%97%8F/"/>
    
    
      <category term="实用库" scheme="http://chenchunyang.site/tags/%E5%AE%9E%E7%94%A8%E5%BA%93/"/>
    
      <category term="好文" scheme="http://chenchunyang.site/tags/%E5%A5%BD%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>hook实现todolist</title>
    <link href="http://chenchunyang.site/2019/07/09/13-Implementing-applications-with-hook/"/>
    <id>http://chenchunyang.site/2019/07/09/13-Implementing-applications-with-hook/</id>
    <published>2019-07-09T07:04:48.000Z</published>
    <updated>2019-12-25T08:00:13.179Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>最近不是特别忙，所以想学一点新的东西充实一下自己，毕竟程序员这个职业就是要不断学习。又打算学学 hook 是因为 vue3.0 计划废除 class 相关 api 而使用 hook，并且 react 中 hook 正式推出也有一段时间了，就让我对这个 hook 语法很好奇，它到底是何方神圣。<br>这篇文章本来是打算记录一些 hook 的使用规则，用法，概念性的东西，但是在 react 的<a href="https://react.docschina.org/docs/hooks-intro.html" target="_blank" rel="noopener"><strong>官方文档</strong></a>上，对 hook 语法的描述已经很清楚了！在这里就不再赘述，主要想记录一下自己用 hook 实现 todolist 的思路。</p><a id="more"></a><h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><h4 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">|-- react-hook&#x2F;&#x2F; 项目文件夹</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    |-- .eslintrc&#x2F;&#x2F; 检验hook语法</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    |-- .gitignore</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    |-- package.json</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    |-- README.md</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    |-- yarn.lock</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    |-- build&#x2F;&#x2F; 打包后的文件</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    |-- public&#x2F;&#x2F; 打包会直接输出的文件</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    |   |-- favicon.ico</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    |   |-- index.html</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    |   |-- manifest.json</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    |-- src</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        |-- App.css</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">        |-- App.js&#x2F;&#x2F; todolist容器</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">        |-- index.css</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">        |-- index.js&#x2F;&#x2F; 入口文件</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">        |-- components</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">            |-- FilterOptions&#x2F;&#x2F; 选项组件（底部）</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">            |   |-- index.css</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">            |   |-- index.js</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">            |-- InputBox&#x2F;&#x2F; 输入组件（顶部）</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">            |   |-- index.css</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">            |   |-- index.js</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">            |-- List&#x2F;&#x2F; 列表组件（中部）</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">                |-- index.css</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">                |-- index.js</span></pre></td></tr></table></figure><h4 id="代码详情"><a href="#代码详情" class="headerlink" title="代码详情"></a>代码详情</h4><h5 id="App-js"><a href="#App-js" class="headerlink" title="App.js"></a>App.js</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">import React, &#123; useState &#125; from &#39;react&#39;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">import &#39;.&#x2F;App.css&#39;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 引入相关组件</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">import InputBox from &#39;.&#x2F;components&#x2F;InputBox&#39;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">import List from &#39;.&#x2F;components&#x2F;List&#39;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">import FilterOptions from &#39;.&#x2F;components&#x2F;FilterOptions&#39;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">function App() &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 定义所有的state</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">const [inputValue, setValue] &#x3D; useState(&#39;&#39;);&#x2F;&#x2F; 输入内容相关</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">const [todoThings, setTodo] &#x3D; useState([&#123; id: 1, text: &#39;学习hook&#39;, done: true &#125;]);&#x2F;&#x2F; 待办事项列表相关</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">const [renderValue, setRenderValue] &#x3D;  useState(1);&#x2F;&#x2F; 1为全部， 2为已完成， 3为未完成</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 往下穿的对象</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">const InputBoxProps &#x3D; &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">inputValue,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">setValue,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">todoThings,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">setTodo,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">const ListProps &#x3D; &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">renderValue,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">todoThings,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">setTodo,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">const optionsProps &#x3D; &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">renderValue,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">setRenderValue,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">return (</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">&lt;div className&#x3D;&#39;box&#39;&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">&lt;h2&gt;TODO计划表&lt;&#x2F;h2&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">&lt;InputBox &#123;...InputBoxProps&#125; &#x2F;&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">&lt;List &#123;...ListProps&#125; &#x2F;&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">&lt;FilterOptions &#123;...optionsProps&#125; &#x2F;&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">&lt;&#x2F;div&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">export default App;</span></pre></td></tr></table></figure><p>该文件是整个 app 的容器文件，从上到下依次引入了 3 个组件（InputBox、List、FilterOptions），然后利用 hook 的 api 定义了 3 种 state 数据，再根据不同组件与 state 数据之间的联系，把 state 传到相应的组件中去。</p><h5 id="InputBox-js"><a href="#InputBox-js" class="headerlink" title="InputBox.js"></a>InputBox.js</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">import React from &#39;react&#39;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 添加一项的方法(参数： 输入框当前值和list事项的值)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">const addOne &#x3D; (value, all) &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">return [...all, &#123; id: new Date().getTime(), text: value, done: false &#125;];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">function InputBox(props) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">let &#123; inputValue, setValue, todoThings, setTodo &#125; &#x3D; props;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">return (</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">&lt;input</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">placeholder&#x3D;&#39;请输入待办事项&#39;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">type&#x3D;&#39;text&#39;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">value&#x3D;&#123;inputValue&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">onChange&#x3D;&#123;e &#x3D;&gt; setValue(e.target.value)&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">&#x2F;&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">&lt;button</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">onClick&#x3D;&#123;() &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">inputValue &amp;&amp; setTodo(addOne(inputValue, todoThings))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 增加完过后清空输入框</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">setValue(&#39;&#39;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">&#125;&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">&gt;ADD&lt;&#x2F;button&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">&lt;&#x2F;div&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">export default InputBox;</span></pre></td></tr></table></figure><p>输入框中内容的改变需要一个输入文本数据，点击添加按钮是把文本数据添加到 list 展示数据的 state 里面去，所以需要 list 的 state 数据。再加上他们 2 个对应的改变值的方法，所以这个组件需要接收 4 个数据。</p><h5 id="FilterOptions-js"><a href="#FilterOptions-js" class="headerlink" title="FilterOptions.js"></a>FilterOptions.js</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">import React from &#39;react&#39;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">import &#39;.&#x2F;index.css&#39;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">const renderArr &#x3D; [&#39;全部&#39;, &#39;已完成&#39;, &#39;未完成&#39;];     &#x2F;&#x2F; 定义出来简化书写</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">function FilterOptions(props) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    let &#123; renderValue, setRenderValue &#125; &#x3D; props;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    return (</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        &lt;div className&#x3D;&#39;options&#39;&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">            &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">                renderArr.map((item, idx) &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">                    return (</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">                        &lt;button</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">                            key&#x3D;&#123;idx&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">                            style&#x3D;&#123;&#123;backgroundColor: renderValue &#x3D;&#x3D;&#x3D; idx + 1 ? &#39;orange&#39; : null&#125;&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">                            onClick&#x3D;&#123;() &#x3D;&gt; setRenderValue(idx + 1)&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">                        &gt;&#123;item&#125;&lt;&#x2F;button&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">                    )</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">                &#125;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">        &lt;&#x2F;div&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">    )</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">export default FilterOptions;</span></pre></td></tr></table></figure><p>该组件的实现思路是改变 state 中的一个‘信号量’，当该信号量为 1 时，list 组件里面渲染全部事件，当为 2 时渲染已完成，当为 3 时渲染未完成。</p><h5 id="List-js"><a href="#List-js" class="headerlink" title="List.js"></a>List.js</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">import React from &#39;react&#39;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">import &#39;.&#x2F;index.css&#39;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 改变当前选中的change方法(参数：当前点击的text值以及渲染的所有数组值)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">const changeDone &#x3D; (id, all) &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">all.forEach(item &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">if(item.id &#x3D;&#x3D;&#x3D; id) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">item.done &#x3D; !item.done;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 返回新的渲染数组(直接返回all的话不会进行更新，会造成修改的数据丢失)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">return [...all];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 删除某一个事件的方法</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">const deleteOne &#x3D; (id, all) &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">let newArr &#x3D; all.filter(item &#x3D;&gt; item.id !&#x3D;&#x3D; id);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">return [...newArr];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 根据条件过滤todo的方法</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">const filterTodo &#x3D; (value, all) &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">switch (value) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">case 1:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">return all;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">case 2:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">return all.filter(item &#x3D;&gt; item.done &#x3D;&#x3D;&#x3D; true);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">case 3:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">return all.filter(item &#x3D;&gt; item.done &#x3D;&#x3D;&#x3D; false);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">default:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">throw new Error(&#39;过滤条件错误&#39;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">function List(props) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">let &#123; renderValue, todoThings, setTodo &#125; &#x3D; props;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 根据renderValue过滤一次todoThings数组</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">let renderArr &#x3D; filterTodo(renderValue, todoThings);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">return (</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">&lt;ul className&#x3D;&#39;listWrap&#39;&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">renderArr.length ?</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line">renderArr.map((item, idx) &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line">return (</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line">&lt;li key&#x3D;&#123;idx&#125; style&#x3D;&#123;&#123;width: &#39;200px&#39;&#125;&#125;&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line">&lt;div</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line">style&#x3D;&#123;&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">48</span></pre></td><td class="code"><pre><span class="line">textDecoration: item.done ? &#39;line-through&#39; : &#39;none&#39;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">49</span></pre></td><td class="code"><pre><span class="line">float: &#39;left&#39;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">50</span></pre></td><td class="code"><pre><span class="line">&#125;&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">51</span></pre></td><td class="code"><pre><span class="line">onClick&#x3D;&#123;() &#x3D;&gt; setTodo(changeDone(item.id, todoThings))&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">52</span></pre></td><td class="code"><pre><span class="line">&gt;&#123;item.text&#125;&lt;&#x2F;div&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">53</span></pre></td><td class="code"><pre><span class="line">&lt;div</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">54</span></pre></td><td class="code"><pre><span class="line">className&#x3D;&#39;close&#39;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">55</span></pre></td><td class="code"><pre><span class="line">onClick&#x3D;&#123;() &#x3D;&gt; setTodo(deleteOne(item.id, todoThings))&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">56</span></pre></td><td class="code"><pre><span class="line">&gt;X&lt;&#x2F;div&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">57</span></pre></td><td class="code"><pre><span class="line">&lt;&#x2F;li&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">58</span></pre></td><td class="code"><pre><span class="line">)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">59</span></pre></td><td class="code"><pre><span class="line">&#125;) :</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">60</span></pre></td><td class="code"><pre><span class="line">null</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">61</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">62</span></pre></td><td class="code"><pre><span class="line">&lt;&#x2F;ul&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">63</span></pre></td><td class="code"><pre><span class="line">);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">64</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">65</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">66</span></pre></td><td class="code"><pre><span class="line">export default List;</span></pre></td></tr></table></figure><p>list 里面涉及到对事件的删除，事件已完成与未完成之间的状态切换，以及根据信号量渲染事件，所以接收了 3 个变量（信号量 state， 事件 state 和改变事件的方法）<br>有一点需要注意：在 state 为对象的时候，直接去改变对象里面的某个数据再返回当前对象并不会触发更新，会造成数据丢失，一定要返回一个新的对象，才能被 react 检测到。</p><h5 id="eslintrc"><a href="#eslintrc" class="headerlink" title=".eslintrc"></a>.eslintrc</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  &quot;plugins&quot;: [</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    &quot;react-hooks&quot;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  ],</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  &quot;rules&quot;: &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    &quot;react-hooks&#x2F;rules-of-hooks&quot;: &quot;error&quot;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    &quot;react-hooks&#x2F;exhaustive-deps&quot;: &quot;warn&quot;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>这个是检测 react hook 语法的插件，官方推荐在代码中加上此插件。</p><h4 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h4><p>该 demo 只是用来体会 hook 语法之间数据定义，数据传递的过程，在样式及某些功能上存在着一些缺陷，这里就不再大幅度修改。<br>该项目的 github 线上地址：<a href="http://chenchunyang.site/hook-todolist/build/">http://chenchunyang.site/hook-todolist/build/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;最近不是特别忙，所以想学一点新的东西充实一下自己，毕竟程序员这个职业就是要不断学习。又打算学学 hook 是因为 vue3.0 计划废除 class 相关 api 而使用 hook，并且 react 中 hook 正式推出也有一段时间了，就让我对这个 hook 语法很好奇，它到底是何方神圣。&lt;br&gt;这篇文章本来是打算记录一些 hook 的使用规则，用法，概念性的东西，但是在 react 的&lt;a href=&quot;https://react.docschina.org/docs/hooks-intro.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;官方文档&lt;/strong&gt;&lt;/a&gt;上，对 hook 语法的描述已经很清楚了！在这里就不再赘述，主要想记录一下自己用 hook 实现 todolist 的思路。&lt;/p&gt;
    
    </summary>
    
    
      <category term="react" scheme="http://chenchunyang.site/categories/react/"/>
    
    
      <category term="hook语法" scheme="http://chenchunyang.site/tags/hook%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>（转）43道js进阶测试题</title>
    <link href="http://chenchunyang.site/2019/06/26/12-Test-questions-of-javascript/"/>
    <id>http://chenchunyang.site/2019/06/26/12-Test-questions-of-javascript/</id>
    <published>2019-06-26T02:44:48.000Z</published>
    <updated>2019-12-25T07:58:47.292Z</updated>
    
    <content type="html"><![CDATA[<p>这两天在网上有一个比较火的 github 库，里面有 43 道 js 相关的测试题，可以测试一下你的基础是否扎实，我也从头到位仔细看了看，觉得很有用，于是转到了个人的博客中来，如果侵犯到了作者的利益，我会随时删除。<br>附上该库的 github 地址：<a href="https://github.com/lydiahallie/javascript-questions" target="_blank" rel="noopener">https://github.com/lydiahallie/javascript-questions</a></p><a id="more"></a><h3 id="JavaScript-进阶问题列表"><a href="#JavaScript-进阶问题列表" class="headerlink" title="JavaScript 进阶问题列表"></a>JavaScript 进阶问题列表</h3><p>答案在问题下方的折叠部分，点击即可展开问题。</p><hr><h4 id="1-输出是什么？"><a href="#1-输出是什么？" class="headerlink" title="1. 输出是什么？"></a>1. 输出是什么？</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(name);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(age);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">var</span> name = <span class="string">'Lydia'</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">let</span> age = <span class="number">21</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">sayHi();</span></pre></td></tr></table></figure><ul><li>A: <code>Lydia</code> 和 <code>undefined</code></li><li>B: <code>Lydia</code> 和 <code>ReferenceError</code></li><li>C: <code>ReferenceError</code> 和 <code>21</code></li><li>D: <code>undefined</code> 和 <code>ReferenceError</code></li></ul><details><summary><b>答案</b></summary>答案: D在函数内部，我们首先通过 `var` 关键字声明了 `name` 变量。这意味着变量被提升了（内存空间在创建阶段就被设置好了），直到程序运行到定义变量位置之前默认值都是 `undefined`。因为当我们打印 `name` 变量时还没有执行到定义变量的位置，因此变量的值保持为 `undefined`。<p>通过 <code>let</code> 和 <code>const</code> 关键字声明的变量也会提升，但是和 <code>var</code> 不同，它们不会被<i>初始化</i>。在我们声明（初始化）之前是不能访问它们的。这个行为被称之为暂时性死区。当我们试图在声明之前访问它们时，JavaScript 将会抛出一个 <code>ReferenceError</code> 错误。</p></details><hr><h4 id="2-输出是什么？"><a href="#2-输出是什么？" class="headerlink" title="2. 输出是什么？"></a>2. 输出是什么？</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(i), <span class="number">1</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(i), <span class="number">1</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><ul><li>A: <code>0 1 2</code> 和 <code>0 1 2</code></li><li>B: <code>0 1 2</code> 和 <code>3 3 3</code></li><li>C: <code>3 3 3</code> 和 <code>0 1 2</code></li></ul><details><summary><b>答案</b></summary>答案: C由于 JavaScript 的事件循环，`setTimeout` 回调会在*遍历结束后*才执行。因为在第一个遍历中遍历 `i` 是通过 `var` 关键字声明的，所以这个值是全局作用域下的。在遍历过程中，我们通过一元操作符 `++` 来每次递增 `i` 的值。当 `setTimeout` 回调执行的时候，`i` 的值等于 3。<p>在第二个遍历中，遍历 <code>i</code> 是通过 <code>let</code> 关键字声明的：通过 <code>let</code> 和 <code>const</code> 关键字声明的变量是拥有块级作用域（指的是任何在 {} 中的内容）。在每次的遍历过程中，<code>i</code> 都有一个新值，并且每个值都在循环内的作用域中。</p></details><hr><h4 id="3-输出是什么？"><a href="#3-输出是什么？" class="headerlink" title="3. 输出是什么？"></a>3. 输出是什么？</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> shape = &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    radius: <span class="number">10</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    diameter() &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.radius * <span class="number">2</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    &#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    perimeter: <span class="function"><span class="params">()</span> =&gt;</span> <span class="number">2</span> * <span class="built_in">Math</span>.PI * <span class="keyword">this</span>.radius</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">shape.diameter();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">shape.perimeter();</span></pre></td></tr></table></figure><ul><li>A: <code>20</code> and <code>62.83185307179586</code></li><li>B: <code>20</code> and <code>NaN</code></li><li>C: <code>20</code> and <code>63</code></li><li>D: <code>NaN</code> and <code>63</code></li></ul><details><summary><b>答案</b></summary>答案: B注意 `diameter` 的值是一个常规函数，但是 `perimeter` 的值是一个箭头函数。<p>对于箭头函数，<code>this</code> 关键字指向的是它当前周围作用域（简单来说是包含箭头函数的常规函数，如果没有常规函数的话就是全局对象），这个行为和常规函数不同。这意味着当我们调用 <code>perimeter</code> 时，<code>this</code> 不是指向 <code>shape</code> 对象，而是它的周围作用域（在例子中是 <code>window</code>）。</p><p>在 <code>window</code> 中没有 <code>radius</code> 这个属性，因此返回 <code>undefined</code>。</p></details><hr><h4 id="4-输出是什么？"><a href="#4-输出是什么？" class="headerlink" title="4. 输出是什么？"></a>4. 输出是什么？</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">+<span class="literal">true</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">!<span class="string">'Lydia'</span>;</span></pre></td></tr></table></figure><ul><li>A: <code>1</code> and <code>false</code></li><li>B: <code>false</code> and <code>NaN</code></li><li>C: <code>false</code> and <code>false</code></li></ul><details><summary><b>答案</b></summary>答案: A一元操作符加号尝试将 bool 转为 number。`true` 转换为 number 的话为 `1`，`false` 为 `0`。<p>字符串 <code>&#39;Lydia&#39;</code> 是一个真值，真值取反那么就返回 <code>false</code>。</p></details><hr><h4 id="5-哪一个是无效的？"><a href="#5-哪一个是无效的？" class="headerlink" title="5. 哪一个是无效的？"></a>5. 哪一个是无效的？</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bird = &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    size: <span class="string">'small'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mouse = &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    name: <span class="string">'Mickey'</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    small: <span class="literal">true</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr></table></figure><ul><li>A: <code>mouse.bird.size</code></li><li>B: <code>mouse[bird.size]</code></li><li>C: <code>mouse[bird[&quot;size&quot;]]</code></li><li>D: All of them are valid</li></ul><details><summary><b>答案</b></summary>答案: A在 JavaScript 中，所有对象的 keys 都是字符串（除非对象是 Symbol）。尽管我们可能不会定义它们为字符串，但它们在底层总会被转换为字符串。<p>当我们使用括号语法时（[]），JavaScript 会解释（或者 unboxes）语句。它首先看到第一个开始括号 <code>[</code> 并继续前进直到找到结束括号 <code>]</code>。只有这样，它才会计算语句的值。</p><p><code>mouse[bird.size]</code>：首先计算 <code>bird.size</code>，这会得到 <code>small</code>。<code>mouse[&quot;small&quot;]</code> 返回 <code>true</code>。</p><p>然后使用点语法的话，上面这一切都不会发生。<code>mouse</code> 没有 <code>bird</code> 这个 key，这也就意味着 <code>mouse.bird</code> 是 <code>undefined</code>。然后当我们使用点语法 <code>mouse.bird.size</code> 时，因为 <code>mouse.bird</code> 是 <code>undefined</code>，这也就变成了 <code>undefined.size</code>。这个行为是无效的，并且会抛出一个错误类似 <code>Cannot read property &quot;size&quot; of undefined</code>。</p></details><hr><h4 id="6-输出是什么？"><a href="#6-输出是什么？" class="headerlink" title="6. 输出是什么？"></a>6. 输出是什么？</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> c = &#123; <span class="attr">greeting</span>: <span class="string">'Hey!'</span> &#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> d;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">d = c;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">c.greeting = <span class="string">'Hello'</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(d.greeting);</span></pre></td></tr></table></figure><ul><li>A: <code>Hello</code></li><li>B: <code>undefined</code></li><li>C: <code>ReferenceError</code></li><li>D: <code>TypeError</code></li></ul><details><summary><b>答案</b></summary>答案: A在 JavaScript 中，当设置两个对象彼此相等时，它们会通过*引用*进行交互。<p>首先，变量 <code>c</code> 的值是一个对象。接下来，我们给 <code>d</code> 分配了一个和 <code>c</code> 对象相同的引用。</p><img src="https://i.imgur.com/ko5k0fs.png" width="200"><p>因此当我们改变其中一个对象时，其实是改变了所有的对象。</p></details><hr><h4 id="7-输出是什么？"><a href="#7-输出是什么？" class="headerlink" title="7. 输出是什么？"></a>7. 输出是什么？</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">3</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">3</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> c = <span class="number">3</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a == b);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a === b);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(b === c);</span></pre></td></tr></table></figure><ul><li>A: <code>true</code> <code>false</code> <code>true</code></li><li>B: <code>false</code> <code>false</code> <code>true</code></li><li>C: <code>true</code> <code>false</code> <code>false</code></li><li>D: <code>false</code> <code>true</code> <code>true</code></li></ul><details><summary><b>答案</b></summary>答案: C`new Number()` 是一个内建的函数构造器。虽然它看着像是一个 number，但它实际上并不是一个真实的 number：它有一堆额外的功能并且它是一个对象。<p>当我们使用 <code>==</code> 操作符时，它只会检查两者是否拥有相同的<em>值</em>。因为它们的值都是 <code>3</code>，因此返回 <code>true</code>。</p><p>然后，当我们使用 <code>===</code> 操作符时，两者的值以及<em>类型</em>都应该是相同的。<code>new Number()</code> 是一个对象而不是 number，因此返回 <code>false</code>。</p></details><hr><h4 id="8-输出是什么？"><a href="#8-输出是什么？" class="headerlink" title="8. 输出是什么？"></a>8. 输出是什么？</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chameleon</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">static</span> colorChange(newColor) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">this</span>.newColor = newColor;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.newColor;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">constructor</span>(&#123; newColor = <span class="string">'green'</span> &#125; = &#123;&#125;) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">this</span>.newColor = newColor;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> freddie = <span class="keyword">new</span> Chameleon(&#123; <span class="attr">newColor</span>: <span class="string">'purple'</span> &#125;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">freddie.colorChange(<span class="string">'orange'</span>);</span></pre></td></tr></table></figure><ul><li>A: <code>orange</code></li><li>B: <code>purple</code></li><li>C: <code>green</code></li><li>D: <code>TypeError</code></li></ul><details><summary><b>答案</b></summary>答案: D`colorChange` 是一个静态方法。静态方法被设计为只能被创建它们的构造器使用（也就是 `Chameleon`），并且不能传递给实例。因为 `freddie` 是一个实例，静态方法不能被实例使用，因此抛出了 `TypeError` 错误。</details><hr><h4 id="9-输出是什么？"><a href="#9-输出是什么？" class="headerlink" title="9. 输出是什么？"></a>9. 输出是什么？</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> greeting;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">greetign = &#123;&#125;; <span class="comment">// Typo!</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(greetign);</span></pre></td></tr></table></figure><ul><li>A: <code>{}</code></li><li>B: <code>ReferenceError: greetign is not defined</code></li><li>C: <code>undefined</code></li></ul><details><summary><b>答案</b></summary>答案: A代码打印出了一个对象，这是因为我们在全局对象上创建了一个空对象！当我们将 `greeting` 写错成 `greetign` 时，JS 解释器实际在上浏览器中将它视为 `global.greetign = {}` （或者 `window.greetign = {}`）。<p>为了避免这个为题，我们可以使用 `”use strict”。这能确保当你声明变量时必须赋值。</p></details><hr><h4 id="10-当我们这么做时，会发生什么？"><a href="#10-当我们这么做时，会发生什么？" class="headerlink" title="10. 当我们这么做时，会发生什么？"></a>10. 当我们这么做时，会发生什么？</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bark</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Woof!'</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">bark.animal = <span class="string">'dog'</span>;</span></pre></td></tr></table></figure><ul><li>A: 正常运行!</li><li>B: <code>SyntaxError</code>. 你不能通过这种方式给函数增加属性。</li><li>C: <code>undefined</code></li><li>D: <code>ReferenceError</code></li></ul><details><summary><b>答案</b></summary>答案: A这在 JavaScript 中是可以的，因为函数是对象！（除了基本类型之外其他都是对象）<p>函数是一个特殊的对象。你写的这个代码其实不是一个实际的函数。函数是一个拥有属性的对象，并且属性也可被调用。</p></details><hr><h4 id="11-输出是什么？"><a href="#11-输出是什么？" class="headerlink" title="11. 输出是什么？"></a>11. 输出是什么？</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">firstName, lastName</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">this</span>.firstName = firstName;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">this</span>.lastName = lastName;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> member = <span class="keyword">new</span> Person(<span class="string">'Lydia'</span>, <span class="string">'Hallie'</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">Person.getFullName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.firstName&#125;</span> <span class="subst">$&#123;<span class="keyword">this</span>.lastName&#125;</span>`</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(member.getFullName());</span></pre></td></tr></table></figure><ul><li>A: <code>TypeError</code></li><li>B: <code>SyntaxError</code></li><li>C: <code>Lydia Hallie</code></li><li>D: <code>undefined</code> <code>undefined</code></li></ul><details><summary><b>答案</b></summary>答案: A你不能像常规对象那样，给构造函数添加属性。如果你想一次性给所有实例添加特性，你应该使用原型。因此本例中，使用如下方式：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Person.prototype.getFullName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.firstName&#125;</span> <span class="subst">$&#123;<span class="keyword">this</span>.lastName&#125;</span>`</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr></table></figure><p>这才会使 <code>member.getFullName()</code> 起作用。为什么这么做有益的？假设我们将这个方法添加到构造函数本身里。也许不是每个 <code>Person</code> 实例都需要这个方法。这将浪费大量内存空间，因为它们仍然具有该属性，这将占用每个实例的内存空间。相反，如果我们只将它添加到原型中，那么它只存在于内存中的一个位置，但是所有实例都可以访问它！</p></details><hr><h4 id="12-输出是什么？"><a href="#12-输出是什么？" class="headerlink" title="12. 输出是什么？"></a>12. 输出是什么？</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">firstName, lastName</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">this</span>.firstName = firstName;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">this</span>.lastName = lastName;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> lydia = <span class="keyword">new</span> Person(<span class="string">'Lydia'</span>, <span class="string">'Hallie'</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sarah = Person(<span class="string">'Sarah'</span>, <span class="string">'Smith'</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(lydia);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(sarah);</span></pre></td></tr></table></figure><ul><li>A: <code>Person {firstName: &quot;Lydia&quot;, lastName: &quot;Hallie&quot;}</code> and <code>undefined</code></li><li>B: <code>Person {firstName: &quot;Lydia&quot;, lastName: &quot;Hallie&quot;}</code> and <code>Person {firstName: &quot;Sarah&quot;, lastName: &quot;Smith&quot;}</code></li><li>C: <code>Person {firstName: &quot;Lydia&quot;, lastName: &quot;Hallie&quot;}</code> and <code>{}</code></li><li>D:<code>Person {firstName: &quot;Lydia&quot;, lastName: &quot;Hallie&quot;}</code> and <code>ReferenceError</code></li></ul><details><summary><b>答案</b></summary>答案: A对于 `sarah`，我们没有使用 `new` 关键字。当使用 `new` 时，`this` 引用我们创建的空对象。当未使用 `new` 时，`this` 引用的是**全局对象**（global object）。<p>我们说 <code>this.firstName</code> 等于 <code>&quot;Sarah&quot;</code>，并且 <code>this.lastName</code> 等于 <code>&quot;Smith&quot;</code>。实际上我们做的是，定义了 <code>global.firstName = &#39;Sarah&#39;</code> 和 <code>global.lastName = &#39;Smith&#39;</code>。而 <code>sarah</code> 本身是 <code>undefined</code>。</p></details><hr><h4 id="13-事件传播的三个阶段是什么？"><a href="#13-事件传播的三个阶段是什么？" class="headerlink" title="13. 事件传播的三个阶段是什么？"></a>13. 事件传播的三个阶段是什么？</h4><ul><li>A: Target &gt; Capturing &gt; Bubbling</li><li>B: Bubbling &gt; Target &gt; Capturing</li><li>C: Target &gt; Bubbling &gt; Capturing</li><li>D: Capturing &gt; Target &gt; Bubbling</li></ul><details><summary><b>答案</b></summary>答案: D在**捕获**（capturing）阶段中，事件从祖先元素向下传播到目标元素。当事件达到**目标**（target）元素后，**冒泡**（bubbling）才开始。<img src="https://i.imgur.com/N18oRgd.png" width="200"></details><hr><h4 id="14-所有对象都有原型。"><a href="#14-所有对象都有原型。" class="headerlink" title="14. 所有对象都有原型。"></a>14. 所有对象都有原型。</h4><ul><li>A: true</li><li>B: false</li></ul><details><summary><b>答案</b></summary>答案: B除了**基本对象**（base object），所有对象都有原型。基本对象可以访问一些方法和属性，比如 `.tostring`。这就是为什么你可以使用内置的 JavaScript 方法！所有这些方法在原型上都是可用的。虽然 JavaScript 不能直接在对象上找到这些方法，但 JavaScript 会沿着原型链找到它们，以便于你使用。</details><hr><h4 id="15-输出是什么？"><a href="#15-输出是什么？" class="headerlink" title="15. 输出是什么？"></a>15. 输出是什么？</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> a + b;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">sum(<span class="number">1</span>, <span class="string">'2'</span>);</span></pre></td></tr></table></figure><ul><li>A: <code>NaN</code></li><li>B: <code>TypeError</code></li><li>C: <code>&quot;12&quot;</code></li><li>D: <code>3</code></li></ul><details><summary><b>答案</b></summary>答案: CJavaScript 是一种**动态类型语言**：我们不指定某些变量的类型。值可以在你不知道的情况下自动转换成另一种类型，这种类型称为**隐式类型转换**（implicit type coercion）。**Coercion** 是指将一种类型转换为另一种类型。<p>在本例中，JavaScript 将数字 <code>1</code> 转换为字符串，以便函数有意义并返回一个值。在数字类型（<code>1</code>）和字符串类型（<code>&#39;2&#39;</code>）相加时，该数字被视为字符串。我们可以连接字符串，比如 <code>&quot;Hello&quot; + &quot;World&quot;</code>，这里发生的是 <code>&quot;1&quot; + &quot;2&quot;</code>，它返回 <code>&quot;12&quot;</code>。</p></details><hr><h4 id="16-输出是什么？"><a href="#16-输出是什么？" class="headerlink" title="16. 输出是什么？"></a>16. 输出是什么？</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> number = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(number++);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(++number);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(number);</span></pre></td></tr></table></figure><ul><li>A: <code>1</code> <code>1</code> <code>2</code></li><li>B: <code>1</code> <code>2</code> <code>2</code></li><li>C: <code>0</code> <code>2</code> <code>2</code></li><li>D: <code>0</code> <code>1</code> <code>2</code></li></ul><details><summary><b>答案</b></summary>答案: C一元**后自增**运算符 `++`：<ol><li>返回值（返回 <code>0</code>）</li><li>值自增（number 现在是 <code>1</code>）</li></ol><p>一元<strong>前自增</strong>运算符 <code>++</code>：</p><ol><li>值自增（number 现在是 <code>2</code>）</li><li>返回值（返回 <code>2</code>）</li></ol><p>结果是 <code>0 2 2</code>.</p></details><hr><h4 id="17-输出是什么？"><a href="#17-输出是什么？" class="headerlink" title="17. 输出是什么？"></a>17. 输出是什么？</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPersonInfo</span>(<span class="params">one, two, three</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(one);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(two);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(three);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = <span class="string">'Lydia'</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> age = <span class="number">21</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">getPersonInfo<span class="string">`<span class="subst">$&#123;person&#125;</span> is <span class="subst">$&#123;age&#125;</span> years old`</span>;</span></pre></td></tr></table></figure><ul><li>A: <code>&quot;Lydia&quot;</code> <code>21</code> <code>[&quot;&quot;, &quot; is &quot;, &quot; years old&quot;]</code></li><li>B: <code>[&quot;&quot;, &quot; is &quot;, &quot; years old&quot;]</code> <code>&quot;Lydia&quot;</code> <code>21</code></li><li>C: <code>&quot;Lydia&quot;</code> <code>[&quot;&quot;, &quot; is &quot;, &quot; years old&quot;]</code> <code>21</code></li></ul><details><summary><b>答案</b></summary>答案: B如果使用标记模板字面量，第一个参数的值总是包含字符串的数组。其余的参数获取的是传递的表达式的值！</details><hr><h4 id="18-输出是什么？"><a href="#18-输出是什么？" class="headerlink" title="18. 输出是什么？"></a>18. 输出是什么？</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkAge</span>(<span class="params">data</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> (data === &#123; <span class="attr">age</span>: <span class="number">18</span> &#125;) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        <span class="built_in">console</span>.log(<span class="string">'You are an adult!'</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (data == &#123; <span class="attr">age</span>: <span class="number">18</span> &#125;) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="built_in">console</span>.log(<span class="string">'You are still an adult.'</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    &#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        <span class="built_in">console</span>.log(<span class="string">`Hmm.. You don't have an age I guess`</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">checkAge(&#123; <span class="attr">age</span>: <span class="number">18</span> &#125;);</span></pre></td></tr></table></figure><ul><li>A: <code>You are an adult!</code></li><li>B: <code>You are still an adult.</code></li><li>C: <code>Hmm.. You don&#39;t have an age I guess</code></li></ul><details><summary><b>答案</b></summary>答案: C在测试相等性时，基本类型通过它们的值（value）进行比较，而对象通过它们的引用（reference）进行比较。JavaScript 检查对象是否具有对内存中相同位置的引用。<p>题目中我们正在比较的两个对象不是同一个引用：作为参数传递的对象引用的内存位置，与用于判断相等的对象所引用的内存位置并不同。</p><p>这也是 <code>{ age: 18 } === { age: 18 }</code> 和 <code>{ age: 18 } == { age: 18 }</code> 都返回 <code>false</code> 的原因。</p></details><hr><h4 id="19-输出是什么？"><a href="#19-输出是什么？" class="headerlink" title="19. 输出是什么？"></a>19. 输出是什么？</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAge</span>(<span class="params">...args</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> args);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">getAge(<span class="number">21</span>);</span></pre></td></tr></table></figure><ul><li>A: <code>&quot;number&quot;</code></li><li>B: <code>&quot;array&quot;</code></li><li>C: <code>&quot;object&quot;</code></li><li>D: <code>&quot;NaN&quot;</code></li></ul><details><summary><b>答案</b></summary>答案: C扩展运算符（`...args`）会返回实参组成的数组。而数组是对象，因此 `typeof args` 返回 `"object"`。</details><hr><h4 id="20-输出是什么？"><a href="#20-输出是什么？" class="headerlink" title="20. 输出是什么？"></a>20. 输出是什么？</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAge</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">    'use strict'</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    age = <span class="number">21</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(age);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">getAge();</span></pre></td></tr></table></figure><ul><li>A: <code>21</code></li><li>B: <code>undefined</code></li><li>C: <code>ReferenceError</code></li><li>D: <code>TypeError</code></li></ul><details><summary><b>答案</b></summary>答案: C使用 `"use strict"`，你可以确保不会意外地声明全局变量。我们从来没有声明变量 `age`，因为我们使用 `"use strict"`，它将抛出一个引用错误。如果我们不使用 `"use strict"`，它就会工作，因为属性 `age` 会被添加到全局对象中了。</details><hr><h4 id="21-输出是什么？"><a href="#21-输出是什么？" class="headerlink" title="21. 输出是什么？"></a>21. 输出是什么？</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sum = <span class="built_in">eval</span>(<span class="string">'10*10+5'</span>);</span></pre></td></tr></table></figure><ul><li>A: <code>105</code></li><li>B: <code>&quot;105&quot;</code></li><li>C: <code>TypeError</code></li><li>D: <code>&quot;10*10+5&quot;</code></li></ul><details><summary><b>答案</b></summary>答案: A代码以字符串形式传递进来，`eval` 对其求值。如果它是一个表达式，就像本例中那样，它对表达式求值。表达式是 `10 * 10 + 5`。这将返回数字 `105`。</details><hr><h4 id="22-cool-secret-可访问多长时间？"><a href="#22-cool-secret-可访问多长时间？" class="headerlink" title="22. cool_secret 可访问多长时间？"></a>22. cool_secret 可访问多长时间？</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">sessionStorage.setItem(<span class="string">'cool_secret'</span>, <span class="number">123</span>);</span></pre></td></tr></table></figure><ul><li>A: 永远，数据不会丢失。</li><li>B: 当用户关掉标签页时。</li><li>C: 当用户关掉整个浏览器，而不只是关掉标签页。</li><li>D: 当用户关闭电脑时。</li></ul><details><summary><b>答案</b></summary>答案: B关闭 **tab 标签页** 后，`sessionStorage` 存储的数据才会删除。<p>如果使用 <code>localStorage</code>，那么数据将永远在那里，除非调用了 <code>localStorage.clear()</code>。</p></details><hr><h4 id="23-输出是什么？"><a href="#23-输出是什么？" class="headerlink" title="23. 输出是什么？"></a>23. 输出是什么？</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">8</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(num);</span></pre></td></tr></table></figure><ul><li>A: <code>8</code></li><li>B: <code>10</code></li><li>C: <code>SyntaxError</code></li><li>D: <code>ReferenceError</code></li></ul><details><summary><b>答案</b></summary>答案: B使用 `var` 关键字，你可以用相同的名称声明多个变量。然后变量将保存最新的值。<p>你不能使用 <code>let</code> 或 <code>const</code> 来实现这一点，因为它们是块作用域的。</p></details><hr><h4 id="24-输出是什么？"><a href="#24-输出是什么？" class="headerlink" title="24. 输出是什么？"></a>24. 输出是什么？</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="number">1</span>: <span class="string">'a'</span>, <span class="number">2</span>: <span class="string">'b'</span>, <span class="number">3</span>: <span class="string">'c'</span> &#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">set</span> = new Set([1, 2, 3, 4, 5]);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">obj.hasOwnProperty('1');</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">obj.hasOwnProperty(1);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span>.has('1');</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span>.has(1);</span></pre></td></tr></table></figure><ul><li>A: <code>false</code> <code>true</code> <code>false</code> <code>true</code></li><li>B: <code>false</code> <code>true</code> <code>true</code> <code>true</code></li><li>C: <code>true</code> <code>true</code> <code>false</code> <code>true</code></li><li>D: <code>true</code> <code>true</code> <code>true</code> <code>true</code></li></ul><details><summary><b>答案</b></summary>答案: C所有对象的键（不包括 Symbol）在底层都是字符串，即使你自己没有将其作为字符串输入。这就是为什么 `obj.hasOwnProperty('1')` 也返回 `true`。<p>对于集合，它不是这样工作的。在我们的集合中没有 <code>&#39;1&#39;</code>：<code>set.has(&#39;1&#39;)</code> 返回 <code>false</code>。它有数字类型为 <code>1</code>，<code>set.has(1)</code> 返回 <code>true</code>。</p></details><hr><h4 id="25-输出是什么？"><a href="#25-输出是什么？" class="headerlink" title="25. 输出是什么？"></a>25. 输出是什么？</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">a</span>: <span class="string">'one'</span>, <span class="attr">b</span>: <span class="string">'two'</span>, <span class="attr">a</span>: <span class="string">'three'</span> &#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(obj);</span></pre></td></tr></table></figure><ul><li>A: <code>{ a: &quot;one&quot;, b: &quot;two&quot; }</code></li><li>B: <code>{ b: &quot;two&quot;, a: &quot;three&quot; }</code></li><li>C: <code>{ a: &quot;three&quot;, b: &quot;two&quot; }</code></li><li>D: <code>SyntaxError</code></li></ul><details><summary><b>答案</b></summary>答案: C如果你有两个名称相同的键，则键会被替换掉。它仍然位于第一个键出现的位置，但是值是最后出现那个键的值。</details><hr><h4 id="26-JavaScript-全局执行上下文为你做了两件事：全局对象和-this-关键字。"><a href="#26-JavaScript-全局执行上下文为你做了两件事：全局对象和-this-关键字。" class="headerlink" title="26. JavaScript 全局执行上下文为你做了两件事：全局对象和 this 关键字。"></a>26. JavaScript 全局执行上下文为你做了两件事：全局对象和 this 关键字。</h4><ul><li>A: true</li><li>B: false</li><li>C: it depends</li></ul><details><summary><b>答案</b></summary>答案: A基本执行上下文是全局执行上下文：它是代码中随处可访问的内容。</details><hr><h4 id="27-输出是什么？"><a href="#27-输出是什么？" class="headerlink" title="27. 输出是什么？"></a>27. 输出是什么？</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; <span class="number">5</span>; i++) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> (i === <span class="number">3</span>) <span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(i);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><ul><li>A: <code>1</code> <code>2</code></li><li>B: <code>1</code> <code>2</code> <code>3</code></li><li>C: <code>1</code> <code>2</code> <code>4</code></li><li>D: <code>1</code> <code>3</code> <code>4</code></li></ul><details><summary><b>答案</b></summary>答案: C如果某个条件返回 `true`，则 `continue` 语句跳过本次迭代。</details><hr><h4 id="28-输出是什么？"><a href="#28-输出是什么？" class="headerlink" title="28. 输出是什么？"></a>28. 输出是什么？</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>.prototype.giveLydiaPizza = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="string">'Just give Lydia pizza already!'</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">'Lydia'</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">name.giveLydiaPizza();</span></pre></td></tr></table></figure><ul><li>A: <code>&quot;Just give Lydia pizza already!&quot;</code></li><li>B: <code>TypeError: not a function</code></li><li>C: <code>SyntaxError</code></li><li>D: <code>undefined</code></li></ul><details><summary><b>答案</b></summary>答案: A`String` 是内置的构造函数，我们可以向它添加属性。我只是在它的原型中添加了一个方法。基本类型字符串被自动转换为字符串对象，由字符串原型函数生成。因此，所有 string(string 对象)都可以访问该方法！</details><hr><h4 id="29-输出是什么？"><a href="#29-输出是什么？" class="headerlink" title="29. 输出是什么？"></a>29. 输出是什么？</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = &#123;&#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> b = &#123; <span class="attr">key</span>: <span class="string">'b'</span> &#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> c = &#123; <span class="attr">key</span>: <span class="string">'c'</span> &#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">a[b] = <span class="number">123</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">a[c] = <span class="number">456</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a[b]);</span></pre></td></tr></table></figure><ul><li>A: <code>123</code></li><li>B: <code>456</code></li><li>C: <code>undefined</code></li><li>D: <code>ReferenceError</code></li></ul><details><summary><b>答案</b></summary>答案: B对象的键被自动转换为字符串。我们试图将一个对象 `b` 设置为对象 `a` 的键，且相应的值为 `123`。<p>然而，当字符串化一个对象时，它会变成 <code>&quot;[object Object]&quot;</code>。因此这里说的是，<code>a[&quot;[object Object]&quot;] = 123</code>。然后，我们再一次做了同样的事情，<code>c</code> 是另外一个对象，这里也有隐式字符串化，于是，<code>a[&quot;[object Object]&quot;] = 456</code>。</p><p>然后，我们打印 <code>a[b]</code>，也就是 <code>a[&quot;[object Object]&quot;]</code>。之前刚设置为 <code>456</code>，因此返回的是 <code>456</code>。</p></details><hr><h4 id="30-输出是什么？"><a href="#30-输出是什么？" class="headerlink" title="30. 输出是什么？"></a>30. 输出是什么？</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'First'</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bar = <span class="function"><span class="params">()</span> =&gt;</span> setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'Second'</span>));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> baz = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'Third'</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">bar();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">foo();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">baz();</span></pre></td></tr></table></figure><ul><li>A: <code>First</code> <code>Second</code> <code>Third</code></li><li>B: <code>First</code> <code>Third</code> <code>Second</code></li><li>C: <code>Second</code> <code>First</code> <code>Third</code></li><li>D: <code>Second</code> <code>Third</code> <code>First</code></li></ul><details><summary><b>答案</b></summary>答案: B我们有一个 `setTimeout` 函数，并首先调用它。然而，它是最后打印日志的。<p>这是因为在浏览器中，我们不仅有运行时引擎，还有一个叫做 <code>WebAPI</code> 的东西。<code>WebAPI</code> 提供了 <code>setTimeout</code> 函数，也包含其他的，例如 DOM。</p><p>将 <em>callback</em> 推送到 WebAPI 后，<code>setTimeout</code> 函数本身(但不是回调！)将从栈中弹出。</p><img src="https://i.imgur.com/X5wsHOg.png" width="200"><p>现在，<code>foo</code> 被调用，打印 <code>&quot;First&quot;</code>。</p><img src="https://i.imgur.com/Pvc0dGq.png" width="200"><p><code>foo</code> 从栈中弹出，<code>baz</code> 被调用. 打印 <code>&quot;Third&quot;</code>。</p><img src="https://i.imgur.com/WhA2bCP.png" width="200"><p>WebAPI 不能随时向栈内添加内容。相反，它将回调函数推到名为 <em>queue</em> 的地方。</p><img src="https://i.imgur.com/NSnDZmU.png" width="200"><p>这就是事件循环开始工作的地方。一个<strong>事件循环</strong>查看栈和任务队列。如果栈是空的，它接受队列上的第一个元素并将其推入栈。</p><img src="https://i.imgur.com/uyiScAI.png" width="200"><p><code>bar</code> 被调用，打印 <code>&quot;Second&quot;</code>，然后它被栈弹出。</p></details><hr><h4 id="31-当点击按钮时，event-target-是什么？"><a href="#31-当点击按钮时，event-target-是什么？" class="headerlink" title="31. 当点击按钮时，event.target 是什么？"></a>31. 当点击按钮时，event.target 是什么？</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onclick</span>=<span class="string">"console.log('first div')"</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">onclick</span>=<span class="string">"console.log('second div')"</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"console.log('button')"</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">            Click!</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr></table></figure><ul><li>A: Outer <code>div</code></li><li>B: Inner <code>div</code></li><li>C: <code>button</code></li><li>D: 一个包含所有嵌套元素的数组。</li></ul><details><summary><b>答案</b></summary>答案: C导致事件的最深嵌套的元素是事件的 target。你可以通过 `event.stopPropagation` 来停止冒泡。</details><hr><h4 id="32-当您单击该段落时，日志输出是什么？"><a href="#32-当您单击该段落时，日志输出是什么？" class="headerlink" title="32. 当您单击该段落时，日志输出是什么？"></a>32. 当您单击该段落时，日志输出是什么？</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onclick</span>=<span class="string">"console.log('div')"</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">onclick</span>=<span class="string">"console.log('p')"</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        Click here!</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr></table></figure><ul><li>A: <code>p</code> <code>div</code></li><li>B: <code>div</code> <code>p</code></li><li>C: <code>p</code></li><li>D: <code>div</code></li></ul><details><summary><b>答案</b></summary>答案: A如果我们点击 `p`，我们会看到两个日志：`p` 和 `div`。在事件传播期间，有三个阶段：捕获、目标和冒泡。默认情况下，事件处理程序在冒泡阶段执行（除非将 `useCapture` 设置为 `true`）。它从嵌套最深的元素向外传播。</details><hr><h4 id="33-输出是什么？"><a href="#33-输出是什么？" class="headerlink" title="33. 输出是什么？"></a>33. 输出是什么？</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123; <span class="attr">name</span>: <span class="string">'Lydia'</span> &#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params">age</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> is <span class="subst">$&#123;age&#125;</span>`</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">sayHi.call(person, <span class="number">21</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">sayHi.bind(person, <span class="number">21</span>);</span></pre></td></tr></table></figure><ul><li>A: <code>undefined is 21</code> <code>Lydia is 21</code></li><li>B: <code>function</code> <code>function</code></li><li>C: <code>Lydia is 21</code> <code>Lydia is 21</code></li><li>D: <code>Lydia is 21</code> <code>function</code></li></ul><details><summary><b>答案</b></summary>答案: D使用这两种方法，我们都可以传递我们希望 `this` 关键字引用的对象。但是，`.call` 是**立即执行**的。<p><code>.bind</code> 返回函数的<strong>副本</strong>，但带有绑定上下文！它不是立即执行的。</p></details><hr><h4 id="34-输出是什么？"><a href="#34-输出是什么？" class="headerlink" title="34. 输出是什么？"></a>34. 输出是什么？</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">(</span>) =&gt;</span> <span class="number">0</span>)();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> sayHi();</span></pre></td></tr></table></figure><ul><li>A: <code>&quot;object&quot;</code></li><li>B: <code>&quot;number&quot;</code></li><li>C: <code>&quot;function&quot;</code></li><li>D: <code>&quot;undefined&quot;</code></li></ul><details><summary><b>答案</b></summary>答案: B`sayHi` 方法返回的是立即执行函数(IIFE)的返回值.此立即执行函数的返回值是 `0`， 类型是 `number`<p>参考：只有 7 种内置类型：<code>null</code>，<code>undefined</code>，<code>boolean</code>，<code>number</code>，<code>string</code>，<code>object</code> 和 <code>symbol</code>。 <code>function</code> 不是一种类型，函数是对象，它的类型是<code>object</code>。</p></details><hr><h4 id="35-下面哪些值是-falsy"><a href="#35-下面哪些值是-falsy" class="headerlink" title="35. 下面哪些值是 falsy?"></a>35. 下面哪些值是 falsy?</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">0</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">(<span class="string">''</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">(<span class="string">' '</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">false</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="literal">undefined</span>;</span></pre></td></tr></table></figure><ul><li>A: <code>0</code>, <code>&#39;&#39;</code>, <code>undefined</code></li><li>B: <code>0</code>, <code>new Number(0)</code>, <code>&#39;&#39;</code>, <code>new Boolean(false)</code>, <code>undefined</code></li><li>C: <code>0</code>, <code>&#39;&#39;</code>, <code>new Boolean(false)</code>, <code>undefined</code></li><li>D: All of them are falsy</li></ul><details><summary><b>答案</b></summary>答案: A只有 6 种 [falsy](https://developer.mozilla.org/zh-CN/docs/Glossary/Falsy) 值:<ul><li><code>undefined</code></li><li><code>null</code></li><li><code>NaN</code></li><li><code>0</code></li><li><code>&#39;&#39;</code> (empty string)</li><li><code>false</code></li></ul><p><code>Function</code> 构造函数, 比如 <code>new Number</code> 和 <code>new Boolean</code>，是 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Truthy" target="_blank" rel="noopener">truthy</a>。</p></details><hr><h4 id="36-输出是什么？"><a href="#36-输出是什么？" class="headerlink" title="36. 输出是什么？"></a>36. 输出是什么？</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="keyword">typeof</span> <span class="number">1</span>);</span></pre></td></tr></table></figure><ul><li>A: <code>&quot;number&quot;</code></li><li>B: <code>&quot;string&quot;</code></li><li>C: <code>&quot;object&quot;</code></li><li>D: <code>&quot;undefined&quot;</code></li></ul><details><summary><b>答案</b></summary>答案: B`typeof 1` 返回 `"number"`。`typeof "number"` 返回 `"string"`。</details><hr><h4 id="37-输出是什么？"><a href="#37-输出是什么？" class="headerlink" title="37. 输出是什么？"></a>37. 输出是什么？</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">numbers[<span class="number">10</span>] = <span class="number">11</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(numbers);</span></pre></td></tr></table></figure><ul><li>A: <code>[1, 2, 3, 7 x null, 11]</code></li><li>B: <code>[1, 2, 3, 11]</code></li><li>C: <code>[1, 2, 3, 7 x empty, 11]</code></li><li>D: <code>SyntaxError</code></li></ul><details><summary><b>答案</b></summary>答案: C当你为数组设置超过数组长度的值的时候， JavaScript 会创建名为 "empty slots" 的东西。它们的值实际上是 `undefined`。你会看到以下场景：<p><code>[1, 2, 3, 7 x empty, 11]</code></p><p>这取决于你的运行环境（每个浏览器，以及 node 环境，都有可能不同）</p></details><hr><h4 id="38-输出是什么？"><a href="#38-输出是什么？" class="headerlink" title="38. 输出是什么？"></a>38. 输出是什么？</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">let</span> x, y;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">try</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    &#125; <span class="keyword">catch</span> (x) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        (x = <span class="number">1</span>), (y = <span class="number">2</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        <span class="built_in">console</span>.log(x);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(x);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(y);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">&#125;)();</span></pre></td></tr></table></figure><ul><li>A: <code>1</code> <code>undefined</code> <code>2</code></li><li>B: <code>undefined</code> <code>undefined</code> <code>undefined</code></li><li>C: <code>1</code> <code>1</code> <code>2</code></li><li>D: <code>1</code> <code>undefined</code> <code>undefined</code></li></ul><details><summary><b>答案</b></summary>答案: A`catch` 代码块接收参数 `x`。当我们传递参数时，这与之前定义的变量 `x` 不同 。这个 `x` 是属于 `catch` 块级作用域的。<p>然后，我们将块级作用域中的变量赋值为 <code>1</code>，同时也设置了变量 <code>y</code> 的值。现在，我们打印块级作用域中的变量 <code>x</code>，值为 <code>1</code>。</p><p><code>catch</code> 块之外的变量 <code>x</code> 的值仍为 <code>undefined</code>， <code>y</code> 的值为 <code>2</code>。当我们在 <code>catch</code> 块之外执行 <code>console.log(x)</code> 时，返回 <code>undefined</code>，<code>y</code> 返回 <code>2</code>。</p></details><hr><h4 id="39-JavaScript-中的一切都是？"><a href="#39-JavaScript-中的一切都是？" class="headerlink" title="39. JavaScript 中的一切都是？"></a>39. JavaScript 中的一切都是？</h4><ul><li>A: 基本类型与对象</li><li>B: 函数与对象</li><li>C: 只有对象</li><li>D: 数字与对象</li></ul><details><summary><b>答案</b></summary>答案: AJavaScript 只有基本类型和对象。<p>基本类型包括 <code>boolean</code>, <code>null</code>, <code>undefined</code>, <code>bigint</code>, <code>number</code>, <code>string</code>, <code>symbol</code>。</p></details><hr><h4 id="40-输出是什么？"><a href="#40-输出是什么？" class="headerlink" title="40. 输出是什么？"></a>40. 输出是什么？</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">[</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    [<span class="number">0</span>, <span class="number">1</span>],</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    [<span class="number">2</span>, <span class="number">3</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">].reduce(</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    (acc, cur) =&gt; &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> acc.concat(cur);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    &#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    [<span class="number">1</span>, <span class="number">2</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">);</span></pre></td></tr></table></figure><ul><li>A: <code>[0, 1, 2, 3, 1, 2]</code></li><li>B: <code>[6, 1, 2]</code></li><li>C: <code>[1, 2, 0, 1, 2, 3]</code></li><li>D: <code>[1, 2, 6]</code></li></ul><details><summary><b>答案</b></summary>答案: C`[1, 2]`是初始值。初始值将会作为首次调用时第一个参数 `acc` 的值。在第一次执行时， `acc` 的值是 `[1, 2]`， `cur` 的值是 `[0, 1]`。合并它们，结果为 `[1, 2, 0, 1]`。第二次执行， `acc` 的值是 `[1, 2, 0, 1]`， `cur` 的值是 `[2, 3]`。合并它们，最终结果为 `[1, 2, 0, 1, 2, 3]`</details><hr><h4 id="41-输出是什么？"><a href="#41-输出是什么？" class="headerlink" title="41. 输出是什么？"></a>41. 输出是什么？</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">!!<span class="literal">null</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">!!<span class="string">''</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">!!<span class="number">1</span>;</span></pre></td></tr></table></figure><ul><li>A: <code>false</code> <code>true</code> <code>false</code></li><li>B: <code>false</code> <code>false</code> <code>true</code></li><li>C: <code>false</code> <code>true</code> <code>true</code></li><li>D: <code>true</code> <code>true</code> <code>false</code></li></ul><details><summary><b>答案</b></summary>答案: B`null` 是 [falsy](https://developer.mozilla.org/zh-CN/docs/Glossary/Falsy)。 `!null` 的值是 `true`。 `!true` 的值是 `false`。<p><code>&quot;&quot;</code> 是 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Falsy" target="_blank" rel="noopener">falsy</a>。 <code>!&quot;&quot;</code> 的值是 <code>true</code>。 <code>!true</code> 的值是 <code>false</code>。</p><p><code>1</code> 是 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Truthy" target="_blank" rel="noopener">truthy</a>。 <code>!1</code> 的值是 <code>false</code>。 <code>!false</code> 的值是 <code>true</code>。</p></details><hr><h4 id="42-setInterval-方法的返回值是什么？"><a href="#42-setInterval-方法的返回值是什么？" class="headerlink" title="42. setInterval 方法的返回值是什么？"></a>42. <code>setInterval</code> 方法的返回值是什么？</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">setInterval(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'Hi'</span>), <span class="number">1000</span>);</span></pre></td></tr></table></figure><ul><li>A: 一个唯一的 id</li><li>B: 该方法指定的毫秒数</li><li>C: 传递的函数</li><li>D: <code>undefined</code></li></ul><details><summary><b>答案</b></summary>答案: A`setInterval` 返回一个唯一的 id。此 id 可被用于 `clearInterval` 函数来取消定时。</details><hr><h4 id="43-输出是什么？"><a href="#43-输出是什么？" class="headerlink" title="43. 输出是什么？"></a>43. 输出是什么？</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">[...<span class="string">'Lydia'</span>];</span></pre></td></tr></table></figure><ul><li>A: <code>[&quot;L&quot;, &quot;y&quot;, &quot;d&quot;, &quot;i&quot;, &quot;a&quot;]</code></li><li>B: <code>[&quot;Lydia&quot;]</code></li><li>C: <code>[[], &quot;Lydia&quot;]</code></li><li>D: <code>[[&quot;L&quot;, &quot;y&quot;, &quot;d&quot;, &quot;i&quot;, &quot;a&quot;]]</code></li></ul><details><summary><b>答案</b></summary>答案: Astring 类型是可迭代的。扩展运算符将迭代的每个字符映射成一个元素。</details>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这两天在网上有一个比较火的 github 库，里面有 43 道 js 相关的测试题，可以测试一下你的基础是否扎实，我也从头到位仔细看了看，觉得很有用，于是转到了个人的博客中来，如果侵犯到了作者的利益，我会随时删除。&lt;br&gt;附上该库的 github 地址：&lt;a href=&quot;https://github.com/lydiahallie/javascript-questions&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/lydiahallie/javascript-questions&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="转载" scheme="http://chenchunyang.site/categories/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="js测试题" scheme="http://chenchunyang.site/categories/%E8%BD%AC%E8%BD%BD/js%E6%B5%8B%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="js进阶" scheme="http://chenchunyang.site/tags/js%E8%BF%9B%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title>开发中关于transfrom缩放的一次应用</title>
    <link href="http://chenchunyang.site/2019/06/21/11-About-the-use-of-transform/"/>
    <id>http://chenchunyang.site/2019/06/21/11-About-the-use-of-transform/</id>
    <published>2019-06-21T04:01:08.000Z</published>
    <updated>2019-12-25T07:55:45.851Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>在做项目上的登陆注册页面时，设计图给的是 1920×1080 的尺寸，当后来要加一行表单时就遇到了一个显示上问题。</p><a id="more"></a><p>如下图：<br><img src="https://i.loli.net/2019/12/02/2cwzlXgOd7LEUD9.jpg" alt="1.jpg"><br>在之前一版没加‘验证码’表单项时，在笔记本上还能够勉强都显示出来，但是再加一行过后，明显已经超过浏览器的显示范围了，这对于用户体验来说很不友好。<br>其实如果是在正规的 1920*1080 分辨率的屏幕下，显示效果很好，但是笔记本用户一般会对电脑显示进行放大，且一般为 125%，所以就会出现这种情况。</p><h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><p>最开始考虑针对这个分辨率再写一套媒体查询的样式，或者全改为自适应尺寸大小，但是这样做工作量其实比较大，也不是很好改。后来考虑能不能单独对这个页面进行缩小显示，便找到了 zoom 属性，单独设置右边表单盒子的 zoom。<br>渲染的时候先用 window.document.documentElement.clientHeight 读取到页面的高度，当这个高度小于 950 的时候，加上 zoom：0.8，但是这时候又遇到了一个新的问题：在 ie 和 chrome 下支持，在 firefox 下不起作用。<br>于是马上打开百度搜索，在看过几个答案过后，得出一个结论：zoom 确实存在兼容性问题，但是可以用 transform: scale(0.8)搭配 transform-origin：‘center center’来解决 firefox 下不起作用的问题（不过最后因为不用考虑 ie 低版本，所以直接舍弃掉 zoom 属性，统一用 transform：scale(0.8)以及 transform-origin：‘center center’来改变样式）。<br>最后在 125%缩放的笔记本显示效果如下：<br><img src="https://i.loli.net/2019/12/02/MaXqKAEQ3LVwkNF.jpg" alt="2.jpg"></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;在做项目上的登陆注册页面时，设计图给的是 1920×1080 的尺寸，当后来要加一行表单时就遇到了一个显示上问题。&lt;/p&gt;
    
    </summary>
    
    
      <category term="css" scheme="http://chenchunyang.site/categories/css/"/>
    
    
      <category term="兼容性" scheme="http://chenchunyang.site/tags/%E5%85%BC%E5%AE%B9%E6%80%A7/"/>
    
  </entry>
  
  <entry>
    <title>基于fetch封装的下载文件代码</title>
    <link href="http://chenchunyang.site/2019/05/20/10-Based-on-fetch-packaging-method/"/>
    <id>http://chenchunyang.site/2019/05/20/10-Based-on-fetch-packaging-method/</id>
    <published>2019-05-20T10:16:48.000Z</published>
    <updated>2019-12-25T07:54:45.054Z</updated>
    
    <content type="html"><![CDATA[<h5 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h5><p>公司的一个项目当中，之前的所有请求并不需要在请求头上都加上 token，不需要验证，但是最近后台逻辑改了，要都加上 token。大多数请求都还好，直接加上就可以了，但是下载文件之前是使用 a 标签来做的，a 标签又没有办法直接加 headers，那么只能考虑用另一种方法模拟，再加上项目中请求基本都是用的 fetch，于是自然是想着基于 fetch 封装一个下载文件的方法。</p><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> fetch <span class="keyword">from</span> <span class="string">'dva/fetch'</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; message &#125; <span class="keyword">from</span> <span class="string">'antd'</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 检查状态码的函数</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkStatus</span>(<span class="params">res</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> (res &amp;&amp; res.status === <span class="number">401</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        message.error(<span class="string">'下载出错，查看控制台'</span>, <span class="number">2</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> (res.status &gt;= <span class="number">200</span> &amp;&amp; res.status &lt; <span class="number">300</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> res;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">const</span> error = <span class="keyword">new</span> <span class="built_in">Error</span>(res.statusText);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    error.res = res;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">throw</span> error;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * 下载文件的主函数</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> *</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * @param &#123;string&#125; url       请求地址</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * @param &#123;string&#125; fileName  文件名</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * @param &#123;string&#125; ext       扩展名</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> *</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">downloadFile</span>(<span class="params">url, fileName, ext</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">    fetch(url, &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">        headers: &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">            Authorization: localStorage.getItem(<span class="string">'token'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">    &#125;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">        .then(checkStatus)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">        .then(<span class="function"><span class="params">res</span> =&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">            res.blob().then(<span class="function"><span class="params">blob</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">let</span> a = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">let</span> url = <span class="built_in">window</span>.URL.createObjectURL(blob);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">let</span> filename = <span class="string">`<span class="subst">$&#123;fileName&#125;</span>.<span class="subst">$&#123;ext&#125;</span>`</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">                a.href = url;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">                a.download = filename;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">                a.click();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">                <span class="built_in">window</span>.URL.revokeObjectURL(url);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line">            &#125;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line">        );</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">48</span></pre></td><td class="code"><pre><span class="line">    downloadFile</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">49</span></pre></td><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h5&gt;&lt;p&gt;公司的一个项目当中，之前的所有请求并不需要在请求头上都加上 token，不需要验证，但是最近后台逻辑改了，要都加上 token。大多数请求都还好，直接加上就可以了，但是下载文件之前是使用 a 标签来做的，a 标签又没有办法直接加 headers，那么只能考虑用另一种方法模拟，再加上项目中请求基本都是用的 fetch，于是自然是想着基于 fetch 封装一个下载文件的方法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="fetch" scheme="http://chenchunyang.site/categories/fetch/"/>
    
    
      <category term="封装" scheme="http://chenchunyang.site/tags/%E5%B0%81%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>gulp工程化及一些常用插件的使用</title>
    <link href="http://chenchunyang.site/2018/11/26/09-Engineering-of-gulp/"/>
    <id>http://chenchunyang.site/2018/11/26/09-Engineering-of-gulp/</id>
    <published>2018-11-26T02:21:08.000Z</published>
    <updated>2019-12-25T07:53:43.165Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>所谓的工程化就是将写完的代码进行压缩合并等操作。<br>gulp 是一个工程化工具，代码在书写完毕之前，需要有回车换行空白符等内容。但是一旦书写完毕，交给浏览器运行时，这些内容没有用。需要移除。<br>此时有两种方案：</p><a id="more"></a><blockquote><p>1、人工移除，就是由人手工删除回车、换行、空白符。<br>2、使用工具移除。</p></blockquote><p>Gulp 就是这样的一个工具，本质上，gulp 就是一个 NodeJS 的第三方模块。</p><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><blockquote><p>第一次下载： npm install gulp 本地安装 提供模块文件<br>第二次下载： npm install gulp -g 全局安装 提供 gulp 命令</p></blockquote><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>gulp 的配置文件名是<strong>gulpfile.js</strong>，用于决定处理哪些模块，以及如何处理。<br>写完之后，就可以调用 gulp 指令执行了。</p><h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><p>gulp 是一个模块，在代码中被引入之后得到一个对象，该对象一共有 5 个 API。</p><ol><li>gulp.task</li><li>gulp.src</li><li>pipe</li><li>gulp.dest</li><li>gulp.watch</li></ol><h4 id="gulp-task"><a href="#gulp-task" class="headerlink" title="gulp.task"></a>gulp.task</h4><p>用于定义任务</p><blockquote><p>语法：gulp.task(taskName, handler);<br>taskName: 任务名称。<br>handler: 对应的任务函数。还可以是数组，如果是数组，数组内的成员是其它任务的名称。</p></blockquote><p><img src="https://i.loli.net/2019/12/02/Z65Uw4dYrzjSXiW.png" alt="1.png"><br>default 是具备特殊含义的任务名。表示默认、缺省的意思。是所有任务的开始入口。<br>上面的定义任务表示当任务开始的时候执行的是 aaa 和 bbb 任务。</p><h4 id="gulp-src"><a href="#gulp-src" class="headerlink" title="gulp.src"></a>gulp.src</h4><p>该方法用于将物理文件转换成文件流。</p><blockquote><p>gulp.src(filePath);<br>filePath: 表示文件路径的值 有三个可选项</p></blockquote><ul><li>可以是字符串 表示单个文件</li><li>可以是数组 表示多个文件</li><li>可以是 glob 表达式</li></ul><p>返回值：一个对象 该对象所拥有的方法可以决定如何操作目标文件<br><img src="https://i.loli.net/2019/12/02/TUytG8oZOfqXiFh.png" alt="2.png"></p><h4 id="gulp-pipe"><a href="#gulp-pipe" class="headerlink" title="gulp.pipe"></a>gulp.pipe</h4><p>该方法不是 gulp 拥有的，而是 gulp.src 执行之后的返回值对象所拥有的。<br>该方法用于定义一次操作。如果有多次操作，那么需要多次调用 pipe 方法。<br><img src="https://i.loli.net/2019/12/02/1jCOhG7eJaksPK2.png" alt="3.png"><br><strong>红色部分，表示定义了一个操作。<br>蓝色部分，表示具体操作。</strong></p><h4 id="gulp-dest"><a href="#gulp-dest" class="headerlink" title="gulp.dest"></a>gulp.dest</h4><p>该方法用于将流文件转换成物理文件，与 src 正好相反。</p><blockquote><p>gulp.dest(path);<br>path: 目录路径 表示发布的地址</p></blockquote><p><img src="https://i.loli.net/2019/12/02/puQRfOloMa43AKg.png" alt="4.png"></p><h4 id="gulp-watch"><a href="#gulp-watch" class="headerlink" title="gulp.watch"></a>gulp.watch</h4><p>该方法用于监听文件，触发任务。<br>当我们一边写代码，一边工程化时，如果每一次修改代码都需要自己调用 gulp 命令，会显得很繁琐,此时我们可以使用 gulp.watch.</p><blockquote><p>gulp.watch(target, handler);<br>target: 目标文件<br><strong>三个可选项</strong>： 文件路径字符串、数组、glob 表达式<br>handler: 当目标文件发生改变时，执行的任务<br><strong>两个可选项</strong>： 函数、数组</p></blockquote><p><img src="https://i.loli.net/2019/12/02/m9LpTkj1UC8t7xB.png" alt="5.png"><br>以上代码表示：当./source/里的所有 js 文件中任一文件发生变化时，调用 update 任务。</p><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><p>gulp 本身只有 5 个 API。只依靠它自己，基本什么工程化行为都无法完成，但是它具备大量的插件（这里介绍 7 个插件）。</p><h4 id="压缩-js"><a href="#压缩-js" class="headerlink" title="压缩 js"></a>压缩 js</h4><blockquote><p>插件名称： gulp-uglify<br>作用：压缩 JS<br>下载：npm install gulp-uglify</p></blockquote><p><img src="https://i.loli.net/2019/12/02/NHAa25f3ncilqjw.png" alt="6.png"></p><h4 id="压缩-css"><a href="#压缩-css" class="headerlink" title="压缩 css"></a>压缩 css</h4><blockquote><p>插件名称：gulp-clean-css<br>作用：压缩 CSS<br>下载：npm install gulp-clean-css</p></blockquote><p><img src="https://i.loli.net/2019/12/02/FrPXRUnJA72NzHb.png" alt="7.png"></p><h4 id="压缩-html"><a href="#压缩-html" class="headerlink" title="压缩 html"></a>压缩 html</h4><blockquote><p>插件名称：gulp-minify-html<br>作用：压缩 html<br>下载：npm install gulp-minify-html</p></blockquote><p><img src="https://i.loli.net/2019/12/02/Ck8su135WAXbht2.png" alt="8.png"></p><h4 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h4><blockquote><p>插件名称：gulp-concat<br>作用：合并文件<br>下载：npm install gulp-concat</p></blockquote><p><img src="https://i.loli.net/2019/12/02/Kq96HXtpARrDalO.png" alt="9.png"></p><h4 id="重命名"><a href="#重命名" class="headerlink" title="重命名"></a>重命名</h4><blockquote><p>模块名称: gulp-rename<br>作用: 重命名文件<br>下载: npm install gulp-rename</p></blockquote><p><img src="https://i.loli.net/2019/12/02/dcyuIjLmVOEB2Sx.png" alt="10.png"></p><h4 id="压缩图片"><a href="#压缩图片" class="headerlink" title="压缩图片"></a>压缩图片</h4><blockquote><p>插件名称：gulp-imagemin<br>作用： 压缩图片<br>下载： npm install gulp-imagemin</p></blockquote><p><img src="https://i.loli.net/2019/12/02/fvpJZm9A4n1DqV6.png" alt="11.png"></p><h4 id="书写校验"><a href="#书写校验" class="headerlink" title="书写校验"></a>书写校验</h4><blockquote><p>插件名称：gulp-jslint<br>作用： 检验 js 格式<br>下载： npm install gulp-jslint<br>格式规范：</p><ul><li>if 右边 一定要有一个空格</li></ul></blockquote><ul><li>function 的参数列表右圆括号右侧必须要有一个空格</li><li>换行使用四个空格缩进</li><li>使用严格模式</li><li>尾巴不能有空格</li><li>等等……</li></ul><p><img src="https://i.loli.net/2019/12/02/mV4u3NtAroi1Zgl.png" alt="12.png"><br>检验有错误：<br><img src="https://i.loli.net/2019/12/02/ASICK5wdp64ogH8.jpg" alt="13.jpeg"><br>检验通过：<br><img src="https://i.loli.net/2019/12/02/hze24XSY1uErW8L.jpg" alt="14.jpeg"></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h3&gt;&lt;p&gt;所谓的工程化就是将写完的代码进行压缩合并等操作。&lt;br&gt;gulp 是一个工程化工具，代码在书写完毕之前，需要有回车换行空白符等内容。但是一旦书写完毕，交给浏览器运行时，这些内容没有用。需要移除。&lt;br&gt;此时有两种方案：&lt;/p&gt;
    
    </summary>
    
    
      <category term="nodejs" scheme="http://chenchunyang.site/categories/nodejs/"/>
    
      <category term="gulp" scheme="http://chenchunyang.site/categories/nodejs/gulp/"/>
    
    
      <category term="常用插件" scheme="http://chenchunyang.site/tags/%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>记录关于路由拦截的小坑</title>
    <link href="http://chenchunyang.site/2018/11/23/08-Route-interception/"/>
    <id>http://chenchunyang.site/2018/11/23/08-Route-interception/</id>
    <published>2018-11-23T06:07:44.000Z</published>
    <updated>2019-12-25T07:53:03.870Z</updated>
    
    <content type="html"><![CDATA[<p>今天在用 nodejs 写登录注册时候遇到了一个问题，我想实现用户在注册时，如果用户名不为空，失去焦点后发送 ajax 与 mongo 数据库中的数据进行对比，数据库中没有用户输入的用户名则显示可用，效果如下：</p><p><img src="https://i.loli.net/2019/12/02/oi3yA2BMu7JLhwq.gif" alt="GIF.gif"></p><a id="more"></a><p>虽然我后来已经实现了，但是当我不知道又弄了哪里的时候，数据不能从后台返回来了。触发验证用户名的事件后，并没有对应的事件发生。<br><img src="https://i.loli.net/2019/12/02/8HgvS2UMY4bqWDt.jpg" alt="1.jpg"><br>一开始，我怀疑是后台“检查用户名”的接口有问题，但是扫了一遍过后并没有发现哪里不对，我又尝试着去后台打印要接收的用户名，结果后台根本没有接收到，那也就是说前台可能并没有发送过来，前台又找了很久，理了一遍逻辑，也没有发现问题= =，不知所措的我在网页中打开了 F12，看看 network 中触发事件的时候会有什么请求，结果发现除了一个 checkName 请求（我们需要的），还多了一个 login 请求，这是什么东西？？<br><img src="https://i.loli.net/2019/12/02/Il6Bodq9vTWSjEF.jpg" alt="2.jpg"><br>请求中多了一个 login，那大概可以确定是这个影响了检查用户名，回想起来之前在”注册”里写的逻辑代码并没有请求这个= =。又看了该页面前端和后端的逻辑，还是没有发现在哪个地方请求了它。</p><hr><p>就在我抓耳挠腮时，我突然想到了之前又配置了一个路由拦截器，如果 session 里面没有用户登录的数据，则让他直接跳转到登录页面，于是我就在路由配置里把下面这段代码注释掉了：<br><img src="https://i.loli.net/2019/12/02/cmd9D3MC2SltQLW.jpg" alt="3.jpg"><br>果然，一切恢复正常，接着又仔细思考了一下原因：我写这个路由拦截器的目的是防止用户没有登录就直接通过输入 url 进入其他页面，拦截的是 get 请求，同时如果我没有登录，在注册验证用户名的时候，同样也是一个 get 请求，那么该拦截器就会对这个请求进行拦截，并尝试跳转到 login 界面。在思考清楚了问题过后，我确定再加一个判断，不拦截验证用户名的 get 请求：<br>工具函数：<br><img src="https://i.loli.net/2019/12/02/NwKernufsYdjxO6.jpg" alt="4.jpg"><br>升级过后的路由拦截器：<br><img src="https://i.loli.net/2019/12/02/MaRHkqyCDc6zAVJ.jpg" alt="5.jpg"></p><p>心得体会：<br>1、多用 F12，在无法确定代码问题的时候，它真的很好用。<br>2、路由拦截时不能过于暴力，如果项目很大，考虑的情况比较多的话，那就要防止拦截到不该拦截的路由。</p><hr><p>November 26, 2018 11:22 AM 更新<br>其实还有一种更简单的办法，就是将不需要拦截的请求放到拦截器的上面，因为 js 是从上往下执行的，只要让它能在拦截器的前面执行就可以。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天在用 nodejs 写登录注册时候遇到了一个问题，我想实现用户在注册时，如果用户名不为空，失去焦点后发送 ajax 与 mongo 数据库中的数据进行对比，数据库中没有用户输入的用户名则显示可用，效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/12/02/oi3yA2BMu7JLhwq.gif&quot; alt=&quot;GIF.gif&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="nodejs" scheme="http://chenchunyang.site/categories/nodejs/"/>
    
    
      <category term="路由拦截" scheme="http://chenchunyang.site/tags/%E8%B7%AF%E7%94%B1%E6%8B%A6%E6%88%AA/"/>
    
  </entry>
  
  <entry>
    <title>处理报错：Router.use() requires a middleware function but got a string</title>
    <link href="http://chenchunyang.site/2018/11/16/07-Requires-a-middleware-function-but-got-a-string/"/>
    <id>http://chenchunyang.site/2018/11/16/07-Requires-a-middleware-function-but-got-a-string/</id>
    <published>2018-11-16T12:58:20.000Z</published>
    <updated>2019-12-25T07:52:21.513Z</updated>
    
    <content type="html"><![CDATA[<p>今天在配置 nodejs 时出现了一个问题如下图所示：</p><p><img src="https://i.loli.net/2019/12/02/ykE4RJ5osVfv6za.jpg" alt="问题动图"></p><a id="more"></a><p>大意是这个 use 方法需要一个中间件函数，但是它得到的是一个字符串。<br>一开始我考虑是我配置的路由 js 文件可能出了点问题，因为错误信息中有个 Router。<br><img src="https://i.loli.net/2019/12/02/ecXrypqF6SMkg1a.jpg" alt="需求动图.jpg"><br>我就对 router 里的 js 文件进行查错：<br><img src="https://i.loli.net/2019/12/02/uqtjEL19TMhYsap.jpg" alt="需求图"><br>但是经过搜索，这么引入是没有问题的，于是我在 app.js 中把配置路由的代码给注释掉了，看能不能开启服务器（不配置路由正常情况下也是能够开启服务器的），结果还是同样的报错。<br>我又试着把配置服务器的注释掉，居然不报错了，看来就是 conf 文件夹里的 js 文件有问题，进入查看。<br><img src="https://i.loli.net/2019/12/02/orXQ68H5xtNc3OV.jpg" alt="问题图"><br>原来我在配置模板的时候，调用错了方法，用的 use 方法，use 里面两个值都是字符串导致报错，正确的配置应该是使用 set 方法。<br>**<br>心得：<br>use 方法里面不能跟字符串，出现这个报错检查 use 里的参数即可。<br>书写代码的时候一定要仔细，有可能一个小地方就导致了程序的崩溃。<br>**</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天在配置 nodejs 时出现了一个问题如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/12/02/ykE4RJ5osVfv6za.jpg&quot; alt=&quot;问题动图&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="nodejs" scheme="http://chenchunyang.site/categories/nodejs/"/>
    
    
      <category term="报错处理" scheme="http://chenchunyang.site/tags/%E6%8A%A5%E9%94%99%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>原生实现ES5数组方法</title>
    <link href="http://chenchunyang.site/2018/11/14/06-Array-method-of-es5/"/>
    <id>http://chenchunyang.site/2018/11/14/06-Array-method-of-es5/</id>
    <published>2018-11-13T16:28:48.000Z</published>
    <updated>2019-12-25T07:51:19.934Z</updated>
    
    <content type="html"><![CDATA[<h6 id="indexOf、lastIndexOf"><a href="#indexOf、lastIndexOf" class="headerlink" title="indexOf、lastIndexOf"></a>indexOf、lastIndexOf</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// indexOf</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="built_in">Array</span>.prototype.indexOf) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="built_in">Array</span>.prototype.indexOf = <span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.length; i++) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>[i] === item) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">return</span> i;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    &#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// lastIndexOf</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="built_in">Array</span>.prototype.lastIndexOf) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="built_in">Array</span>.prototype.lastIndexOf = <span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="keyword">this</span>.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>[i] === item) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">return</span> i;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    &#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><hr><h6 id="forEach、map"><a href="#forEach、map" class="headerlink" title="forEach、map"></a>forEach、map</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// forEach</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="built_in">Array</span>.prototype.forEach) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="built_in">Array</span>.prototype.forEach = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.length; i++) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">            fn(<span class="keyword">this</span>[i], i, <span class="keyword">this</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    &#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// map</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="built_in">Array</span>.prototype.map) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="built_in">Array</span>.prototype.map = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">var</span> result = [];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.length; i++) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">            result.push(fn(<span class="keyword">this</span>[i], i, <span class="keyword">this</span>));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> result;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    &#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><hr><h6 id="fill"><a href="#fill" class="headerlink" title="fill"></a>fill</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// fill</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="built_in">Array</span>.prototype.fill) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="built_in">Array</span>.prototype.fill = <span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.length; i++) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">this</span>[i] = item;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    &#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><hr><h6 id="some、every"><a href="#some、every" class="headerlink" title="some、every"></a>some、every</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// some</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="built_in">Array</span>.prototype.some) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="built_in">Array</span>.prototype.some = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.length; i++) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span> (fn(<span class="keyword">this</span>[i], i, arr)) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    &#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// every</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="built_in">Array</span>.prototype.every) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="built_in">Array</span>.prototype.every = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.length; i++) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span> (!fn(<span class="keyword">this</span>[i], i, arr)) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    &#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><hr><h6 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// filter</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="built_in">Array</span>.prototype.filter) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="built_in">Array</span>.prototype.filter = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">var</span> result = [];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.length; i++) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span> (fn(<span class="keyword">this</span>[i], i, <span class="keyword">this</span>)) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">                result.push(<span class="keyword">this</span>[i]);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> result;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    &#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><hr><h6 id="reduce、reduceRight"><a href="#reduce、reduceRight" class="headerlink" title="reduce、reduceRight"></a>reduce、reduceRight</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// reduce</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="built_in">Array</span>.prototype.reduce) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="built_in">Array</span>.prototype.reduce = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">var</span> result = <span class="keyword">this</span>[<span class="number">0</span>];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="keyword">this</span>.length; i++) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">            result = fn(result, <span class="keyword">this</span>[i], i, arr);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> result;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    &#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// reduceRight</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="built_in">Array</span>.prototype.reduceRight) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="built_in">Array</span>.prototype.reduceRight = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">var</span> result = <span class="keyword">this</span>[<span class="keyword">this</span>.length - <span class="number">1</span>];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="keyword">this</span>.length - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">            result = fn(result, <span class="keyword">this</span>[i], i, arr);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> result;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    &#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h6 id=&quot;indexOf、lastIndexOf&quot;&gt;&lt;a href=&quot;#indexOf、lastIndexOf&quot; class=&quot;headerlink&quot; title=&quot;indexOf、lastIndexOf&quot;&gt;&lt;/a&gt;indexOf、lastIndexOf&lt;/h6&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// indexOf&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;.prototype.indexOf) &amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;.prototype.indexOf = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;item&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.length; i++) &amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;[i] === item) &amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; i;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="ES5" scheme="http://chenchunyang.site/categories/ES5/"/>
    
    
      <category term="兼容" scheme="http://chenchunyang.site/tags/%E5%85%BC%E5%AE%B9/"/>
    
      <category term="数组方法" scheme="http://chenchunyang.site/tags/%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>迭代器（jq、underscore、es5、自建）</title>
    <link href="http://chenchunyang.site/2018/11/03/05-Understanding-of-iterators/"/>
    <id>http://chenchunyang.site/2018/11/03/05-Understanding-of-iterators/</id>
    <published>2018-11-03T13:12:31.000Z</published>
    <updated>2019-12-25T07:50:31.871Z</updated>
    
    <content type="html"><![CDATA[<h5 id="Jq-中的迭代器"><a href="#Jq-中的迭代器" class="headerlink" title="Jq 中的迭代器"></a>Jq 中的迭代器</h5><h6 id="dom-结构"><a href="#dom-结构" class="headerlink" title="dom 结构"></a>dom 结构</h6><p><img src="https://i.loli.net/2019/12/02/YlosBPycev8Z5MJ.jpg" alt="jq1.jpg"></p><a id="more"></a><h6 id="js-方法"><a href="#js-方法" class="headerlink" title="js 方法"></a>js 方法</h6><p><img src="https://i.loli.net/2019/12/02/hMGcsWezUQr7SxJ.jpg" alt="jq2.jpg"></p><h6 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h6><p><img src="https://i.loli.net/2019/12/02/9Nm1khVTLdtwncA.jpg" alt="jq3.jpg">（省略后面重复部分）</p><h6 id="定义一个数组及遍历"><a href="#定义一个数组及遍历" class="headerlink" title="定义一个数组及遍历"></a>定义一个数组及遍历</h6><p><img src="https://i.loli.net/2019/12/02/uBkgNWGepob2Qa4.jpg" alt="jq4.jpg"><br>输出：（this 的实质就是每一次遍历到的 value 的数字包装类型）<br><img src="https://i.loli.net/2019/12/02/oYEeqQKiX7CuS5r.jpg" alt="jq5.jpg"></p><hr><h5 id="underscore-中的迭代器"><a href="#underscore-中的迭代器" class="headerlink" title="underscore 中的迭代器"></a>underscore 中的迭代器</h5><h6 id="定义一个数组及遍历-1"><a href="#定义一个数组及遍历-1" class="headerlink" title="定义一个数组及遍历"></a>定义一个数组及遍历</h6><p><img src="https://i.loli.net/2019/12/02/5BrsMNnmkD1gISi.jpg" alt="jq6.jpg"><br>输出：<br><img src="https://i.loli.net/2019/12/02/1IdmP5ChsLJYFof.jpg" alt="jq7.jpg"></p><hr><h5 id="es5-中的迭代器"><a href="#es5-中的迭代器" class="headerlink" title="es5 中的迭代器"></a>es5 中的迭代器</h5><h6 id="定义一个数组及遍历-2"><a href="#定义一个数组及遍历-2" class="headerlink" title="定义一个数组及遍历"></a>定义一个数组及遍历</h6><p><img src="https://i.loli.net/2019/12/02/CwGAkXojhZqdacP.jpg" alt="jq8.jpg"><br>输出：<br><img src="https://i.loli.net/2019/12/02/WAEzJIsuRhramyX.jpg" alt="jq9.jpg"></p><hr><h5 id="自己的迭代器"><a href="#自己的迭代器" class="headerlink" title="自己的迭代器"></a>自己的迭代器</h5><h6 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h6><p>定义一个函数，该函数可以实现对数组和对象的遍历。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * each函数 实现迭代器</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * @target 要遍历的目标</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * @fn     要执行的函数</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> **/</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">each</span>(<span class="params">target, fn</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 判断传递的target是数组还是对象</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> (target <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">// 说明传递的是数组</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; target.length; i++) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">            <span class="comment">// 执行fn</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">            fn.call(target[i], target[i], i, target);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.toString.call(target) === <span class="string">'[object Object]'</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> target) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">            <span class="comment">// 传递二个参数</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">            fn.call(target[i], target[i], i);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h6 id="数组遍历结果"><a href="#数组遍历结果" class="headerlink" title="数组遍历结果"></a>数组遍历结果</h6><p><img src="https://i.loli.net/2019/12/02/HhceLd8EI74GTnN.jpg" alt="jq10.jpg"><br><img src="https://i.loli.net/2019/12/02/gyPu7avIGVr1C3o.jpg" alt="jq11.jpg"></p><h6 id="对象遍历结果"><a href="#对象遍历结果" class="headerlink" title="对象遍历结果"></a>对象遍历结果</h6><p><img src="https://i.loli.net/2019/12/02/YT6RH9BsftuOzlW.jpg" alt="jq12.jpg"><br><img src="https://i.loli.net/2019/12/02/WQMrd6F7cgna9xV.jpg" alt="jq13.jpg"></p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;Jq-中的迭代器&quot;&gt;&lt;a href=&quot;#Jq-中的迭代器&quot; class=&quot;headerlink&quot; title=&quot;Jq 中的迭代器&quot;&gt;&lt;/a&gt;Jq 中的迭代器&lt;/h5&gt;&lt;h6 id=&quot;dom-结构&quot;&gt;&lt;a href=&quot;#dom-结构&quot; class=&quot;headerlink&quot; title=&quot;dom 结构&quot;&gt;&lt;/a&gt;dom 结构&lt;/h6&gt;&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/12/02/YlosBPycev8Z5MJ.jpg&quot; alt=&quot;jq1.jpg&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="归纳" scheme="http://chenchunyang.site/categories/%E5%BD%92%E7%BA%B3/"/>
    
    
      <category term="迭代器方法" scheme="http://chenchunyang.site/tags/%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>观察者模式结合seajs模块化的小实例</title>
    <link href="http://chenchunyang.site/2018/10/30/04-Modular-example/"/>
    <id>http://chenchunyang.site/2018/10/30/04-Modular-example/</id>
    <published>2018-10-30T09:20:33.000Z</published>
    <updated>2019-12-25T07:49:30.637Z</updated>
    
    <content type="html"><![CDATA[<h4 id="实例演示"><a href="#实例演示" class="headerlink" title="实例演示"></a>实例演示</h4><p>首先我们打算实现如下图所示的效果：<br><img src="https://i.loli.net/2019/12/02/aLjBlcPWpEGqohA.gif" alt="GIF.gif"></p><a id="more"></a><p>不难，一个人写很简单，这里不是想讨论在一个 js 当中该怎么写出来，而是主要体会模块化开发多人协作的过程。</p><hr><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>我们把这个需求分给三个人做： 1.小 a 做”消息数量“ 2.小 b 做”中部消息内容“ 3.小 c 做”文本框及按钮“<br>如果一个人做，那么可以很容易控制先做什么后做什么，但是三个人来做，每个人的进度都不同，那么模块之间该如何互相通信这是一个很重要的问题。</p><h5 id="初步设想"><a href="#初步设想" class="headerlink" title="初步设想"></a>初步设想</h5><p>由于在 seajs 中，每个模块之间都是独立互不干扰的，换句话说，模块与模块之间是相互访问不到的，想让它们通信的话，初步设想在每个模块中向全局暴露内容变量。<br>虽然这么做确实能够实现，但是也有问题，因为我们在设计程序的时候，原则就是尽量减少全局变量，每多一个全局变量，就会多占用一些资源，并且存在内存泄漏的隐患，影响性能。</p><h5 id="再次假设"><a href="#再次假设" class="headerlink" title="再次假设"></a>再次假设</h5><p>既然变量太多了，那我们看看能不能减少变量，因为在 js 中，对象里面是可以写方法的。想到这里，再次尝试，定义一个 ob 对象，里面写方法，然后在每个模块里面分别调用这个对象的方法，确实可行。但是这样就完美了吗？<br>答案是 no，当在全局中直接暴露了这个存有方法的对象，人为地进行修改很方便，很不安全。</p><h5 id="继续假设"><a href="#继续假设" class="headerlink" title="继续假设"></a>继续假设</h5><p>想到这里，问题就来了，怎么做才能避免直接就能够修改 ob 对象？<br>对，没错，利用 IIFE 自执行函数把它包一下。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义对象</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Observer = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 定义真正的观察者</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">var</span> ob = &#123;&#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 定义返回接口</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">/**</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="comment">         * on方法要用于向观察者对象中添加事件</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="comment">         * @type 字符串  表示事件名称</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="comment">         * @fn   函数    表示事件函数</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="comment">         **/</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        on: <span class="function"><span class="keyword">function</span>(<span class="params">type, fn</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">            ob[type] = fn;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">        &#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">/**</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"><span class="comment">         * trigge方法用于触发观察者对象中的事件</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"><span class="comment">         * @type 要触发的事件名称</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"><span class="comment">         **/</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">        trigger: <span class="function"><span class="keyword">function</span>(<span class="params">type, val</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">            ob[type](val);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">    &#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">&#125;)();</span></pre></td></tr></table></figure><p>但是现在在全局中还是有一个 Observer 变量，现在我们也把它放入模块文件中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义模块</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require, exports, module</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义对象</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> Observer = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 定义真正的观察者</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> ob = &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"> &#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义返回接口</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"> <span class="keyword">return</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="comment">  * on方法要用于向观察者对象中添加事件</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="comment">  * @type 字符串  表示事件名称</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="comment">  * @fn   函数    表示事件函数</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="comment">  **/</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"> on: <span class="function"><span class="keyword">function</span>(<span class="params">type, fn</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"> ob[type] = fn;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"> &#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"><span class="comment">  * trigge方法用于触发观察者对象中的事件</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"><span class="comment">  * @type 要触发的事件名称</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"><span class="comment">  **/</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"> trigger: <span class="function"><span class="keyword">function</span>(<span class="params">type, val</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"> ob[type](val);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line"> &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line"> &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">// 向外暴露功能</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = Observer;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line"> &#125;)();</span></pre></td></tr></table></figure><h4 id="最终形态"><a href="#最终形态" class="headerlink" title="最终形态"></a>最终形态</h4><p>我们发现在第三个模块的点击事件中，里面的触发事件写了两个，一个是模块一中定义的消息数量++，一个是模块二中的 li 元素增加，既然它们是点击按钮过后一起执行的，并且具有相同的语义，那我们能否把这两个合并成一个呢？确实也可以，也就是说书写一个 trigger 执行函数要同时触发两个定义函数，那么两个定义函数的名字必须要相同，才能用一个 trigger 函数来触发。但是如果使用之前的”观察者“，在用同一个名字定义了第一个模块和第二个模块中的事件后，触发第三个模块中的事件，会发现其中一个模块函数并不能被触发，因为当给一个对象设置同名属性的时候，会有一个覆盖的现象。那么这时候我们可以考虑利用数组，如果对象存在这个属性方法，那么把后一个属性方法 push 进数组，如果不存在，直接定义这个属性方法，并且存在数组中。后面的事件处理函数也要改成遍历数组处理定义函数，这样便可以达到简化的目的。<br>升级过后的观察者对象如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Observer = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义真正的观察者</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ob = &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义返回接口</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">on: <span class="function"><span class="keyword">function</span>(<span class="params">type, fn</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断当前type是不是一个数组， 如果是数组说明被使用过，就可以直接push进去</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (ob[type]) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">ob[type].push(fn);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">&#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 说明不是数组， 将其变为数组</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">ob[type] = [fn];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">&#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">trigger: <span class="function"><span class="keyword">function</span>(<span class="params">type, val</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 循环执行</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; ob[type].length; i++) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">ob[type][i](val);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">&#125;)();</span></pre></td></tr></table></figure><p>最后再贴上最终完成的其他三个模块的文件代码：</p><ul><li>模块一</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义模块</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require, exports, module</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 引入工具模块</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">var</span> Observer = <span class="built_in">require</span>(<span class="string">'modules/tools'</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 获取元素</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">var</span> num = <span class="built_in">document</span>.getElementById(<span class="string">'num'</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 监听添加消息事件</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    Observer.on(<span class="string">'add'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        num.innerHTML = +num.innerHTML + <span class="number">1</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    &#125;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 监听减少消息事件</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    Observer.on(<span class="string">'remove'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        num.innerHTML = +num.innerHTML - <span class="number">1</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    &#125;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure><ul><li>模块二</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义模块</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require, exports, module</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 引入工具模块</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">var</span> Observer = <span class="built_in">require</span>(<span class="string">'modules/tools'</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 获取元素</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">var</span> ul = <span class="built_in">document</span>.getElementById(<span class="string">'list'</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 监听消息添加事件</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    Observer.on(<span class="string">'add'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">// 创建元素</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">var</span> li = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">var</span> textNode = <span class="built_in">document</span>.createTextNode(val);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">var</span> span = <span class="built_in">document</span>.createElement(<span class="string">'span'</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">// 添加类名</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">        span.className = <span class="string">'close'</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">// 添加内部文本</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">        span.innerHTML = <span class="string">'&amp;times;'</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">// 添加点击事件</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">        span.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">            ul.removeChild(<span class="keyword">this</span>.parentNode);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">            <span class="comment">// 通知第一个模块，消息数量要减一</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">            Observer.trigger(<span class="string">'remove'</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">        &#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">// 上树</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">        li.appendChild(textNode);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">        li.appendChild(span);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">        ul.appendChild(li);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">    &#125;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure><ul><li>模块三</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义模块</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require, exports, module</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 引入工具模块</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">var</span> Observer = <span class="built_in">require</span>(<span class="string">'modules/tools'</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 获取元素</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">var</span> words = <span class="built_in">document</span>.getElementById(<span class="string">'words'</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 添加点击事件</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">// 获取用户输入的内容</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">var</span> val = words.value;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">// 触发事件</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        Observer.trigger(<span class="string">'add'</span>, val);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    &#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;实例演示&quot;&gt;&lt;a href=&quot;#实例演示&quot; class=&quot;headerlink&quot; title=&quot;实例演示&quot;&gt;&lt;/a&gt;实例演示&lt;/h4&gt;&lt;p&gt;首先我们打算实现如下图所示的效果：&lt;br&gt;&lt;img src=&quot;https://i.loli.net/2019/12/02/aLjBlcPWpEGqohA.gif&quot; alt=&quot;GIF.gif&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://chenchunyang.site/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="观察者模式" scheme="http://chenchunyang.site/tags/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式——委托模式</title>
    <link href="http://chenchunyang.site/2018/10/30/03-Delegation-mode/"/>
    <id>http://chenchunyang.site/2018/10/30/03-Delegation-mode/</id>
    <published>2018-10-30T03:45:53.000Z</published>
    <updated>2019-12-25T07:48:36.110Z</updated>
    
    <content type="html"><![CDATA[<h4 id="场景引入"><a href="#场景引入" class="headerlink" title="场景引入"></a>场景引入</h4><p>假设现在我们要做一个需求，如下图：</p><p><img src="https://i.loli.net/2019/12/02/hgPUkYzpKZOGdLT.gif" alt="需求动图"></p><a id="more"></a><p>根据效果我们需要完成的有三件事情：</p><ol><li>点击按钮，添加一个 Li 元素</li><li>点击哪个 Li 就让哪个变色</li><li>点击哪个叉（span 元素）就让它对应的父元素消失</li></ol><hr><h4 id="顺向思维"><a href="#顺向思维" class="headerlink" title="顺向思维"></a>顺向思维</h4><p>如果按照一般的思路，可能我们会像下面这么写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给按钮添加点击事件</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 创建长条元素li</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">var</span> li = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 创建了元素立马加上点击变色事件</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    li.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">this</span>.style.backgroundColor = <span class="string">'red'</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    &#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 创建小叉叉元素span</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">var</span> span = <span class="built_in">document</span>.createElement(<span class="string">'span'</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 创建后同样马上加上移除事件</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    span.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        ul.removeChild(<span class="keyword">this</span>.parentNode);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    &#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 添加span的内部文本</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">    span.innerHTML = <span class="string">'&amp;times;'</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 上树</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">    li.appendChild(span);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">    ul.appendChild(li);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr></table></figure><p>上面是给添加出来的元素写好了效果，但是针对于原来就在页面上存在的元素，我们还需要循环对它们添加事件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.length; i++) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 给所有li添加点击事件</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    lis[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">this</span>.style.backgroundColor = <span class="string">'red'</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    &#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; spans.length; i++) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 给所有span添加点击事件</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    spans[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        ul.removeChild(<span class="keyword">this</span>.parentNode);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    &#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>至此，效果就已经符合需求了。但是现在有一个问题，每次创建了一个新的元素，我们就给它新定义一个事件，也对存在的元素循环添加了事件，虽然看起来事件都一样，都是同一个事件，但是它们在内存中的地址相同吗?很显然它们并不是同一个，每次添加事件都会在内存上重新开辟一块地址来存放事件，虽然看起来一样，但是它们的地址并不一样。可以想象成现在有 3 个人，他们分别买了一套房子，房子里装修的一模一样，他们房子的占地面积就是 3 套的占地面积；现在还有另外三个人，他们合租在一起，这时他们的占地面积就是 1 套的面积。那么我们可能会做如下优化：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 创建元素</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">var</span> li = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    li.onclick = li_click;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">var</span> span = <span class="built_in">document</span>.createElement(<span class="string">'span'</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    span.onclick = span_click;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 添加span的内部文本</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    span.innerHTML = <span class="string">'&amp;times;'</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 上树</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    li.appendChild(span);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    ul.appendChild(li);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.length; i++) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 给所有li添加点击事件</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    lis[i].onclick = li_click;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; spans.length; i++) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 给所有span添加点击事件</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">    spans[i].onclick = span_click;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 把事件提取出来，在内存上占用一个地址</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">li_click</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">this</span>.style.backgroundColor = <span class="string">'red'</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">span_click</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">    ul.removeChild(<span class="keyword">this</span>.parentNode);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>就买“两套房子”，谁要使用的话就给谁“配钥匙”，这样就减少了内存的消耗。</p><hr><h4 id="继续优化"><a href="#继续优化" class="headerlink" title="继续优化"></a>继续优化</h4><p>这时候继续思考，当我们点击叉子符号的时候，实际上只是对当前的 li 进行了移除，不在页面当中显示了而已，实际上在内存当中，它仍然保持着对点击事件的引用，也就是说它仍然拿着房子钥匙，那部分内存就无法被回收，这就是内存泄漏（无法被重复利用的内存）的隐患。那我们实际上可以考虑另外一种实现方式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给父元素添加点击事件</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">ul.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 通过e.target属性判断点击是哪个元素</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// console.log(e.target);</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> (e.target.nodeName.toLowerCase() === <span class="string">'li'</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">// 改变背景色</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        e.target.style.backgroundColor = <span class="string">'red'</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e.target.nodeName.toLowerCase() === <span class="string">'span'</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">// 移除对应的父元素</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        ul.removeChild(e.target.parentNode);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 点击btn添加li</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    ul.innerHTML += <span class="string">'&lt;li&gt;&lt;span&gt;&amp;times;&lt;/span&gt;&lt;/li&gt;'</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr></table></figure><p>btn 按钮只负责向 ul 中添加 li 和 span 元素，而其他的事件都交给 ul 元素来处理，交给了父元素来判断，这就是委托模式。<br>综上，委托模式解决了三件事情：</p><ol><li>减少事件的数量</li><li>预言未来的元素（不用担心后面添加的元素没有效果）</li><li>防止内存泄漏</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;场景引入&quot;&gt;&lt;a href=&quot;#场景引入&quot; class=&quot;headerlink&quot; title=&quot;场景引入&quot;&gt;&lt;/a&gt;场景引入&lt;/h4&gt;&lt;p&gt;假设现在我们要做一个需求，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/12/02/hgPUkYzpKZOGdLT.gif&quot; alt=&quot;需求动图&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://chenchunyang.site/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="委托模式" scheme="http://chenchunyang.site/tags/%E5%A7%94%E6%89%98%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式——登陆策略</title>
    <link href="http://chenchunyang.site/2018/10/30/02-Login-policy/"/>
    <id>http://chenchunyang.site/2018/10/30/02-Login-policy/</id>
    <published>2018-10-29T16:37:23.000Z</published>
    <updated>2019-12-25T07:47:56.643Z</updated>
    
    <content type="html"><![CDATA[<h4 id="场景引入"><a href="#场景引入" class="headerlink" title="场景引入"></a>场景引入</h4><p>在网页中，当我们在注册一个账号，也就是填写表单的时候，经常会看到一个效果：比如输入了用户名过后，再点击密码框想设置密码，这时网页会检测你的用户名是否合法，是否符合要求（如下图）。</p><p><img src="https://i.loli.net/2019/12/02/ZKM6XcD4xLGAhi1.jpg" alt="form.jpg"></p><a id="more"></a><hr><h4 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h4><p>针对这个效果，我们可以对用户名输入框设置一个失去焦点的事件，并且在失去焦点的时候对输入的内容进行正则匹配，不匹配则报错。</p><hr><h4 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取元素</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> username = <span class="built_in">document</span>.getElementById(<span class="string">"username"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 失去焦点之后检测内容的合法性</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">username.onblur = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取用户输入的内容</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> val = <span class="keyword">this</span>.value;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义正则表达式</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^[a-zA-Z]+$/g</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 验证</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (reg.test(val)) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"恭喜你, 通过了"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">&#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"请输入纯英文"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>这个思路还是很好想到的，但是突然有一天，我们又得到一个需求，要对 100 个表单都进行验证。虽然按照这个思路一个一个地写，一个一个地复制粘贴也没有问题，但是未免效率太低了，这时候就需要进行优化！</p><hr><h4 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h4><p>先说说 jQery 中的运用到的策略模式，如下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"js/jquery-1.7.2.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"js/jquery.easing.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用animate函数</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#box1"</span>).animate(&#123;<span class="attr">left</span>: <span class="number">1000</span>&#125;, <span class="number">1000</span>, <span class="string">"easeInOutBack"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#box2"</span>).animate(&#123;<span class="attr">left</span>: <span class="number">1000</span>&#125;, <span class="number">1000</span>, <span class="string">"easeInOutElastic"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#box3"</span>).animate(&#123;<span class="attr">left</span>: <span class="number">1000</span>&#125;, <span class="number">1000</span>, <span class="string">"easeInElastic"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">&lt;<span class="regexp">/script&gt;</span></span></pre></td></tr></table></figure><p>它把一些运动的方式写到了 easing.js 中，当我们去给盒子定义动画的时候<br>不用再去一个一个书写，想用哪种效果就直接在 animate 函数第三个参数写上“名字”。<br>按照这种想法，我们在进行表单验证时，也把特定的验证方式封装成一个对象里的方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义对象</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Strategy = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">var</span> s = &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        chunyingwen: <span class="function"><span class="keyword">function</span>(<span class="params">str</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">            <span class="comment">// 定义正则表达式</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">var</span> reg = <span class="regexp">/^[a-zA-Z]+$/g</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">            <span class="comment">// 验证</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span> (reg.test(str)) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">return</span> <span class="string">'通过'</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">            &#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">return</span> <span class="string">'请输入纯英文'</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        &#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">        chunshuzi: <span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">            <span class="comment">// 定义正则匹配</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">var</span> reg = <span class="regexp">/^\d+$/g</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">            <span class="comment">// 验证</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span> (reg.test(num)) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">return</span> <span class="string">'通过'</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">            &#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">return</span> <span class="string">'请输入纯数字'</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">    &#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 定义接口</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">        use: <span class="function"><span class="keyword">function</span>(<span class="params">type, str</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">return</span> s[type](str);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">    &#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">&#125;)();</span></pre></td></tr></table></figure><p>接下来再进行验证的时候就简单了，用哪种方法直接引入该对象下的方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 失去焦点之后检测内容的合法性</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">username.onblur = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">var</span> result = Strategy.use(<span class="string">'chunshuzi'</span>, <span class="keyword">this</span>.value);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr></table></figure><p>所以整体来说策略模式就是把特定的方法都提取出来，封装在一个对象下的属性方法中，用哪个就提取哪个。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;场景引入&quot;&gt;&lt;a href=&quot;#场景引入&quot; class=&quot;headerlink&quot; title=&quot;场景引入&quot;&gt;&lt;/a&gt;场景引入&lt;/h4&gt;&lt;p&gt;在网页中，当我们在注册一个账号，也就是填写表单的时候，经常会看到一个效果：比如输入了用户名过后，再点击密码框想设置密码，这时网页会检测你的用户名是否合法，是否符合要求（如下图）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/12/02/ZKM6XcD4xLGAhi1.jpg&quot; alt=&quot;form.jpg&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://chenchunyang.site/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="表单验证" scheme="http://chenchunyang.site/tags/%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81/"/>
    
      <category term="策略模式" scheme="http://chenchunyang.site/tags/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>入坑记</title>
    <link href="http://chenchunyang.site/2018/10/28/01-Into-the-pit/"/>
    <id>http://chenchunyang.site/2018/10/28/01-Into-the-pit/</id>
    <published>2018-10-28T13:22:02.000Z</published>
    <updated>2019-12-25T07:46:48.179Z</updated>
    
    <content type="html"><![CDATA[<h4 id="伪前言"><a href="#伪前言" class="headerlink" title="伪前言"></a>伪前言</h4><p>前言听起来好像是书中才应该有的东西，但是因为这是这篇博客中的第一篇，想写个开头，实在是不知道应该用什么小标题了，于是起了个“伪前言”。我记得在大二下学期自学前端刚开始的时候，学会了一点简单的切图和布局，想做一个自己的博客，于是在腾讯云上买了一年的域名权限（花了我 10 多块大洋），还买了服务器（这个忘记怎么收费的了），跟着流程一直到了备案照相，腾讯发过来印有他们公司 logo 的幕布，但是后来又因为一些其他事情加上找实习，这件事就没再继续了，当时还以为能切个图，买个服务器弄个域名一上传就完了，结果怎么弄都没有成功。<a id="more"></a></p><p>一晃过去一年多了，最近还是想有一个自己的记录笔记的地方，朋友说可以试试 hexo 在 github 上搭一个静态的，说干就干！后来搜索了很多文章，网上也有很多教程，自己就抱着试试看的态度一步一步地跟着教程走，当我刷出来它默认主题的 hello world 的页面时，我知道第一步已经成功完成了。</p><hr><h4 id="继续配置"><a href="#继续配置" class="headerlink" title="继续配置"></a>继续配置</h4><p>默认的主题配置实在是有点丑，于是又开始了愉快的百度搜索之旅，选择了一个据说是使用人数最多的一个主题 next，既然使用的人多我想它的文档应该也挺全的，后面就开始具体进行配置了。</p><p>配置主要是对两个文件进行改动，一个是主目录下的<strong>_config.yml</strong>，另一个是主题文件中的<strong>_config.yml</strong>。简单的修改过后，一个雏形已经出来了，后来又想加一个统计文章阅读次数的功能，利用的 LeanCloud 第三方工具，后面还想再开放一个评论的功能，这也需要一个第三方工具，静态网站的弊端就体现在这里了，因为自己没有实现后端，只能依赖于第三方服务商。目前点击个别导航栏会弹出 404，还没有添加页面，后面会把他们都添加上，同样还有文章的分页与折叠也需要实现一下，不然不方便阅读。最主要的还是要再申请一个域名并改变它的“this 指向“,不然看到域名总是有种寄人篱下的感觉= =。</p><hr><p>嗯，暂时就这样吧，后面我会陆陆续续记录前端方面的学习。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;伪前言&quot;&gt;&lt;a href=&quot;#伪前言&quot; class=&quot;headerlink&quot; title=&quot;伪前言&quot;&gt;&lt;/a&gt;伪前言&lt;/h4&gt;&lt;p&gt;前言听起来好像是书中才应该有的东西，但是因为这是这篇博客中的第一篇，想写个开头，实在是不知道应该用什么小标题了，于是起了个“伪前言”。我记得在大二下学期自学前端刚开始的时候，学会了一点简单的切图和布局，想做一个自己的博客，于是在腾讯云上买了一年的域名权限（花了我 10 多块大洋），还买了服务器（这个忘记怎么收费的了），跟着流程一直到了备案照相，腾讯发过来印有他们公司 logo 的幕布，但是后来又因为一些其他事情加上找实习，这件事就没再继续了，当时还以为能切个图，买个服务器弄个域名一上传就完了，结果怎么弄都没有成功。
    
    </summary>
    
    
      <category term="随笔" scheme="http://chenchunyang.site/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="入坑" scheme="http://chenchunyang.site/tags/%E5%85%A5%E5%9D%91/"/>
    
  </entry>
  
</feed>
